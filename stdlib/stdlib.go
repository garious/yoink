package stdlib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _assert_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x52\x4d\x6f\x9c\x30\x10\xbd\xfb\x57\xbc\xee\x21\x18\xa5\x4a\xee\xbb\xda\x43\x2b\xe5\x9c\x1e\x7a\x2b\x3d\xb8\x30\x10\x97\xdd\x31\x6b\x9b\xd2\x55\xc5\x7f\xaf\xcd\x57\xd0\x96\x48\x95\x62\x09\x69\xc6\x8f\x99\xf7\xe6\x79\x1e\x1f\xf1\xf5\xc5\x9a\x0e\x8a\x41\xbf\x73\x6a\xbc\x36\x1c\x92\x02\x64\xad\xb1\x38\x93\x73\xaa\x22\xe8\x12\xbe\x33\x50\xb6\x6a\xcf\xc4\xde\x85\x88\xc0\xc6\x83\x2e\xad\x3a\x89\xb2\xe5\x7c\xa8\xa4\x8b\x54\xb9\x0f\x57\x1f\x43\xbb\x86\x72\x4f\x45\x8a\x3f\x02\x88\x1d\x26\x08\xc7\xe3\xf1\x16\x8d\xc7\x92\x6f\x2d\x1f\x62\xda\x83\x4e\x6e\x60\x95\xfe\xda\x90\x29\xb1\x2a\x4d\xcc\x8f\x9f\xa1\x36\x59\x95\xfe\x52\x16\xf5\x61\xce\xca\x20\x5c\xd6\xd0\xbc\xc5\x82\x49\xcb\x0c\x3d\xbc\x28\xf7\xdc\xf1\x17\x6b\x1a\xb2\xfe\x2a\xeb\x14\x77\x77\xa8\xf1\x21\x32\xe5\x86\x9d\xb7\x6d\xee\x8d\x4d\x6e\x7a\x0c\x67\x19\xf7\x5b\xfd\xfd\x75\xe2\x90\xa4\x87\xf5\xbf\xbd\xb8\x0d\x5e\x25\x8e\xf5\x1b\x02\x47\xe0\x5d\xf2\xd6\x73\x06\x51\x83\x7b\x2d\x17\x54\x6a\xa6\x22\xf6\x59\xc4\x0f\xfd\x16\x68\xab\xd7\x6c\xb3\xf3\x2a\xaf\x71\x04\x53\x87\xa7\xb8\x23\x32\x7d\x18\xee\x0e\x9b\x25\x3e\x6e\x97\xdc\x7d\x72\x2e\xc8\x8f\x1b\x52\x2a\x7d\x0a\xae\x67\xfc\x3c\xbc\x22\xb4\xc3\x59\x3b\xa7\xb9\x42\x4d\xd7\x3d\x76\xb8\x0f\xe3\xdd\x23\xc9\x38\xe3\x24\x04\x72\xc5\x34\x51\xa5\xff\x72\xf5\x6f\xfb\x3d\x2d\xd3\x32\xd2\xdb\x92\x9e\x26\xaf\xf6\x19\x47\x19\xb3\x75\x21\xdc\x65\xfc\xb9\xf5\xa8\x8c\x9f\xb0\x69\x1f\xff\x47\x67\x2f\x7a\x21\x46\x67\xe5\x28\x82\x2e\xfb\xf0\x89\x3e\xe0\xe2\x6f\x00\x00\x00\xff\xff\x1c\xe6\x04\x4f\x82\x03\x00\x00")

func assert_js_bytes() ([]byte, error) {
	return bindata_read(
		_assert_js,
		"assert.js",
	)
}

func assert_js() (*asset, error) {
	bytes, err := assert_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assert.js", size: 898, mode: os.FileMode(420), modTime: time.Unix(1418359115, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dom_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x59\x5b\x8f\xdb\xb8\x15\x7e\xf7\xaf\x60\x5f\x56\x1e\xac\xa3\x64\x26\x6f\xe3\x4e\x17\x69\xb2\xc0\xee\x62\xd3\xb4\x9b\x00\x8b\x36\x18\x60\x69\xe9\x78\xac\x58\x16\x5d\x92\xf2\x58\x18\xf8\xbf\xf7\x1c\x52\xa4\x48\x5d\x3c\x4e\xb6\x7a\x48\x2c\x91\xfc\x78\x2e\xdf\xb9\x90\xf3\xf2\xe5\xec\xe5\x4b\xf6\x5e\xe4\x75\x09\xac\xe2\x3b\xb8\x9d\xd9\x4f\xf4\xe4\x62\xd7\xbe\xbd\x03\x95\xc9\x62\xaf\x0b\x51\x85\x13\x12\x9c\x91\xb0\x42\x31\xce\x7e\xe1\x07\xfe\xd1\xcc\x61\x3b\x8b\xb6\x16\x92\x65\x12\xb8\x2e\xaa\x07\xf6\xd3\xa7\xf7\xbf\x32\x28\x61\x07\x95\x56\xa9\x5b\xff\x69\x03\x6e\x36\x1c\xf7\x42\x81\x62\xfa\x51\x30\xb1\xfa\x02\x99\x66\x99\xa8\x94\x96\x75\xa6\x85\x54\x0b\x96\x18\x2c\xf8\xd1\x62\x24\x8c\x57\x39\x4b\x5a\xc4\x24\x42\x5c\xd7\x55\x46\x92\xa2\x58\x59\x06\x28\x90\xc6\x8f\x0a\x75\x63\x5c\x3e\xd4\x46\x82\x05\x2e\xb7\x32\x69\xfe\x60\xf4\x36\x5f\xb8\xd6\xb2\x58\xd5\x1a\x94\xc3\xb3\xa2\xd8\x41\x29\x79\xc3\xc4\x9a\xa9\x7a\xe5\x34\x59\x18\x31\x70\x10\x0e\xf8\xfa\x13\xbe\x94\x20\x55\xbb\x2a\x35\xe2\x78\x63\x16\xeb\x35\x48\xa8\x32\x20\x83\xe9\x0d\xd7\x9d\xf8\x0c\x75\xd7\x7b\x51\x91\xfe\x28\xab\xb5\x9a\xa8\x68\x33\xc4\xae\xab\x1c\x64\xd9\x90\x19\xdf\x7d\x78\xef\xf0\xda\xb5\x0b\xf6\xb8\x41\x58\xae\x06\x06\xb2\xaf\xca\x48\x28\x41\xd7\xb2\xb2\xe8\x88\xe1\x16\xa7\x81\x2f\xa3\xd5\xf3\xe3\x15\xbb\xbb\xbb\x73\xf3\xf0\x35\x45\xd1\x51\x8c\xf9\x55\xb0\xe4\xef\x8d\x13\x9c\x64\xeb\x4b\xde\xee\x85\x02\xe2\x77\xa3\x46\x81\xae\x00\xe5\x08\xe2\x6d\x6c\x6c\x61\x25\x74\x1b\xb6\x16\x54\xec\xb1\xd0\x1b\x51\xd3\xf0\x7f\xeb\x42\xd2\x36\x9c\xad\xa4\x78\x54\x20\x19\xf2\xcb\xbf\x38\x2c\x55\xec\xea\x92\x23\x63\xd0\x4b\xd9\x86\xa1\x59\x7e\x51\xef\xc4\x8e\xe6\xfe\x47\xec\x56\x05\xa0\x53\xde\xb0\x15\x97\xf0\x62\x65\xec\x1d\xf0\xb6\xa8\x34\xc8\x3d\x0a\x12\xc0\xb5\x20\xff\x10\x39\xa4\x5f\x48\x9c\xb2\xc4\x8f\xeb\x75\x91\x41\x68\xbc\x7f\xdd\xb2\xdf\x49\x8b\x62\xcd\x76\x0d\xe3\xfb\x7d\x59\x64\xd6\x10\x79\x83\xec\xc2\x97\xb2\x6c\x58\xbd\xcf\x8d\x47\x04\x9a\x46\x7a\x55\x3b\xd2\xfd\x10\x20\xbe\xb9\x65\x3f\x23\xfd\x81\xe7\x86\x72\xa0\xb5\xb3\xb1\x9f\x8f\x94\x92\x68\xa4\xb2\x59\x50\xf4\x48\x50\xd6\xbf\x39\xec\xc9\x55\x55\xd6\x18\xeb\x39\x40\x7c\xd0\x09\x1f\x56\x68\xac\x03\x5f\x61\xc4\x1d\xb8\x2c\xe8\x07\x5a\xe4\xdf\xa2\x96\x96\xc2\x6c\x63\x39\xcc\x14\x9a\xbd\xcc\x69\x63\x03\x2a\xfc\xba\x00\xcf\x21\x18\x8a\x35\x06\xa3\xd5\xa9\x5d\xbd\x82\x2e\x88\x21\x67\xb5\x72\x3a\x74\x70\x71\x90\xd8\xa4\xc3\xca\x62\x25\xb9\x6c\xac\xb9\x73\x74\x48\xd6\x97\x22\xb0\x02\x6d\x6e\x2d\xeb\x28\x17\xa0\x79\x23\x57\x0d\xd3\x05\xa6\x80\x02\x49\x75\xe0\x65\x8d\x92\xa1\xaa\x0f\xa0\x5a\x37\x46\x9e\x6c\x50\x0a\x50\x55\xa2\x7d\x00\x5c\x31\x5e\x6b\xb1\x43\x9f\x5a\x57\xda\x68\x09\x04\x52\x26\xdf\xa1\x0d\x51\xec\x76\x51\x68\x79\x27\x6d\xda\x73\xf1\xda\xda\x2d\x64\x0c\x66\x87\x1d\x46\x15\x6e\xa2\x34\xed\x47\x26\xd4\x26\xd2\x7d\x36\x25\x3d\xe1\xa8\x25\x0f\xb6\x70\x11\x93\x19\xcb\xe7\x50\x72\x03\x20\x75\xbd\xb7\x9a\x93\x9d\xc8\x1b\x98\x01\xd9\x0e\x76\x02\x05\x35\x74\xea\xb6\x8e\xbc\x60\xf5\xaf\x00\x72\x23\xf3\x6c\x86\xde\x26\x6e\x29\x76\xc7\x3e\xcf\x4c\xf6\x0f\xbc\xf8\x45\x25\xb3\xfb\xe5\x6c\xe6\x72\x2f\x13\xd5\x6f\xc8\xdd\x66\xde\xcd\xb9\x62\x4f\x33\xb3\x0e\x77\x79\x93\x23\xb5\x74\x83\x7e\x4c\x54\x62\x68\xda\x3a\x25\x31\x5f\x3f\xab\xfb\x84\x69\xd1\x4f\x57\x98\x30\x31\xd3\x13\x84\xdf\x86\xe7\xf9\x47\x5a\x31\xc7\x04\x1e\x38\x63\x61\xd1\xf1\x3f\xda\xd5\x29\x85\xd1\x39\x77\xf8\x18\xed\x68\x1d\xcc\xc6\x18\x5d\x81\x1e\x1f\x22\x71\x59\xf0\x40\xea\x97\xde\x31\xf7\x33\x7d\x00\xe4\xc6\x32\x9a\x48\x76\x12\xe1\x9c\x1d\xdf\xcf\x9d\xc0\xf3\x03\xe2\x46\x50\x87\xe5\xa9\x07\x10\xe8\x91\xee\x6b\xb5\x99\x8b\x60\xc2\x09\x8d\xa1\xe0\x12\xd9\x82\x35\x33\xfb\x6f\x68\xfd\x2e\x7e\x92\x6d\xec\x81\xc3\xa4\xe9\x71\xf5\xcf\x26\xaf\x3b\x20\x0f\x92\xb8\xa0\x42\xf2\x26\x54\xaf\xd6\x45\x05\x79\xb2\xc0\x70\xb3\x41\x8c\x99\xa0\x78\xa8\x84\x44\x36\x5d\x04\x82\xa9\xaa\x33\xc3\x82\xa6\x57\x63\x31\x5c\x28\x87\x12\xed\x1a\xa7\x49\x27\x80\x44\xd2\x1f\x88\xce\x7d\x06\xbd\x71\x53\x07\x2c\xda\x2e\xd8\xa1\xcf\xa0\xc3\x57\x53\x87\x18\x81\xf2\x92\xb3\xc7\x08\x63\x40\x71\xf8\x2f\x58\x70\xbd\x16\x7d\x8c\xd6\xcd\xa0\x3b\x61\x49\x38\x5e\xf6\xc0\x4e\xa3\x5c\x3c\x0c\x49\x38\x40\xb7\xba\x3d\x2b\xc4\x84\x20\x3d\x31\x8c\x28\x63\x54\xed\x20\xac\x3b\x02\x94\x31\x88\x58\xb7\x3f\x1d\x28\x17\xea\xf8\xbc\x7e\xa7\xf1\xe0\xf2\xac\xda\x6d\x3f\x82\x7e\xbb\x29\xca\x1c\xfb\xa6\x79\xc4\xa9\x88\x1e\x6d\xdb\xe3\xd7\xcd\x8f\x6a\x98\x78\x8a\xaa\x02\x69\xba\xd5\x3b\x96\x24\xb1\x20\x54\x75\xe6\xe4\xe6\x02\x07\x5f\x2d\xf1\xbf\xbf\xb2\xa3\x4a\x4b\xa8\x1e\xf4\x06\x5f\xbf\xff\x7e\x4c\x41\x5a\x70\xc4\x05\x47\xf5\xb9\xb8\x1f\x9a\x9d\x86\x74\xb3\x27\x82\x1f\x4d\x1f\x88\x69\x99\x9a\xaf\x84\xfd\x80\x95\x21\x33\x3d\x74\x6a\x4b\xe0\x27\xac\x43\xd4\x1d\x51\xc7\x78\xcb\x8e\x43\x2c\x32\xb9\xc3\x6a\x9b\x48\x0b\xe9\x74\x4e\xa6\x58\x66\x04\xf4\x7d\xe7\x10\x79\x80\x8e\xb1\x75\x21\xb4\x5b\x1a\x32\xa8\xc0\x7d\x8e\x1f\xd6\xae\xf5\x7d\x71\x7d\x6e\x31\x3d\x03\xfa\x1d\x27\x84\xa4\xe7\x34\x39\x62\xd5\x1c\xc9\x0b\xd3\x4b\x87\x5f\x20\xc5\x3a\x8e\x96\x32\x94\x1b\x08\x12\xb0\x75\xe9\xe8\xea\x12\xe7\x5b\xdb\xc9\xf0\x28\xdb\x9b\x7a\xe0\x8e\x46\x2c\xa9\x76\x98\x54\xbb\x3e\xd5\x1d\xd0\x12\xae\x92\xb6\xd2\xfa\x4f\xf8\x96\x2c\x7c\x6a\x1f\x3f\x35\xb1\xe4\x48\x0b\xdb\xa3\x53\xbb\x12\xa7\x44\x1d\x28\xce\x02\xd5\x2f\xf7\xf1\x21\x65\xaf\x7c\x4f\x41\x8f\x49\x76\x41\x43\x86\x7d\x0a\xb5\x24\x6e\x38\xa0\x0a\x35\x31\x01\xab\xfb\x8e\x36\x3d\xce\x93\x39\x0d\xe3\xef\x53\x58\x48\xfd\xcf\xce\x72\x64\xb7\x0a\x23\x20\x92\x03\x10\xa1\x17\x29\x9d\xd4\x29\x41\x5f\x2d\x23\xb0\xa8\x26\xab\x08\x8b\x93\x38\xb8\xaa\x1b\x5e\x46\xe3\xdb\x65\xa4\x23\x1f\x64\x10\x93\x23\xb6\x58\xb6\xd8\x70\xac\x5b\x95\x6e\xb8\xfa\xf0\x58\xfd\x53\x8a\x3d\x48\xdd\x60\x3e\x66\xdf\x7d\xc7\xb6\x26\x5b\xda\xb6\x2c\xa1\x0f\x5c\x7d\xde\xde\x5f\x56\x26\x9e\x2b\xad\x06\xea\xf9\xac\x3f\x61\x7e\xb2\x98\xe9\xfd\x22\x63\x58\x36\x1a\x7b\x99\x9f\xcb\x61\xf7\x37\x6a\x1e\xb3\x96\x4c\x34\x3a\x25\x5a\xdf\x37\x94\x32\x86\xf2\x1d\xd8\xa5\xa6\x79\xa6\x6f\xfd\x33\x66\xc9\x28\x0b\xf8\xeb\x96\xc8\x3e\xc7\x96\x4c\xed\xa1\x42\xc5\xf6\x19\x56\x9f\x30\xc1\x9e\x8f\x1a\x7a\xe2\x34\x34\x59\x2a\xd4\x55\x3f\x41\x4d\xb5\x0a\x56\xa8\xaf\xee\xb8\x62\x8d\x71\x9e\xa9\x75\xe3\xe9\xf5\x68\x07\x71\xd2\xb9\x24\xec\x3a\x29\x3b\x91\xba\xa9\xb3\x25\x7e\x02\xe5\x6c\xc7\xe2\x8d\x31\x1b\x7c\xfa\xb6\x2a\xef\x2d\x30\x5d\xe9\x8d\x01\xfe\x8f\xd5\x9e\x9e\x6f\xaf\xf8\xec\xb2\xa2\xdf\xdf\xe3\xeb\xea\xfe\x57\x16\xee\x0b\x0a\x34\x9b\x2a\xef\xe3\x5f\xcf\xd7\xea\xe1\xba\x73\x91\x1e\x97\xcc\xb8\x04\xb5\x91\xee\x06\x97\x63\x95\x10\xda\x98\xb6\x45\x78\x60\xb7\xae\x72\xc0\x64\xe5\x80\x91\xca\x31\x7d\x70\xc0\xc4\xf7\x23\xc9\xfc\x6b\xa1\x30\xff\xa0\x8f\xb1\x0e\xc0\xb7\xd7\x81\x7e\x13\x67\x23\x82\xfd\x8d\xbd\xea\x8b\xd0\x76\xda\x41\xfa\xc0\x8e\x84\x6e\xb5\x57\x28\x44\x14\xbd\xfe\x98\x74\xf5\xe4\x6e\x25\xa3\x33\x7a\xb0\xbd\x1f\xef\x9d\xb0\x7f\xb3\xdf\x39\xcb\x4a\x51\x81\xbb\x0d\x2d\xaa\x7d\xed\xae\x36\xdb\xcb\xb0\xbd\x14\x5a\x90\x2f\x70\x70\x03\xb2\x30\x59\xae\xd7\xf4\xbc\x25\x8c\x39\xea\x73\xea\x35\x43\xe6\xbb\x08\x15\x35\x53\xd3\x0e\xf4\x8e\x89\x65\x5f\xd8\x0a\x1e\x1d\xe4\x84\xd8\x24\x6b\x5d\xb5\xd7\xb8\x89\xb8\x6e\x2f\xdb\xc5\x0d\x5d\x01\xfc\x4e\x47\xf1\x95\x40\x23\x53\x09\xe1\x45\x15\x9e\xe5\xcd\x2d\xfb\x16\x1a\x7b\x04\x6f\xcf\xe8\x95\x59\x8a\xed\xe4\x16\xd9\xb6\x97\x90\x01\xdd\x4e\xf6\xb5\xdc\x15\xc7\x02\xd3\xe8\x35\xd6\xc3\x9b\x50\x25\x93\x78\x5f\x53\x43\x76\x9a\x6c\x7b\x3a\x9a\x8a\x41\xd7\x6e\x18\x72\x7d\x19\x45\xc5\x6b\xea\x6d\xd0\x68\xd7\xf8\xff\xf9\x03\x5f\x6f\xdb\x9b\xd1\x6d\x6f\xc6\x7b\x2a\x71\x73\x51\x0b\xe5\xa5\xb9\xb9\x48\x1a\x47\xf0\xd7\x7d\xaf\x96\xb0\xd6\x2f\xd6\xa2\xcc\xa3\x56\xdd\xdf\x9c\x64\x5c\x65\x3c\x07\xd3\x8e\x28\xd3\x01\x50\x46\x78\x3a\xb1\x3f\x8c\x4b\xfe\xa0\xd2\xf1\xea\x3e\x7c\xbb\xee\xde\xd2\x34\x0d\x47\x5e\x5c\xdf\xf7\x38\x3a\x00\x1f\x9c\x7d\xb1\x8e\x49\xc8\xeb\x0c\xe6\x06\x67\x81\x5b\xf7\x89\xe9\x44\x75\xb7\xb1\x4f\xed\x5f\x6c\x7c\x43\xec\xfb\x26\xd7\xd6\x2c\x7c\x4e\x3c\x5d\x85\x20\x5e\x30\xd7\x8d\xf3\xf8\x0c\x11\xa4\x46\x7e\xbe\xdd\xe1\xc1\x21\x81\x4f\x1c\x12\xf4\xa6\xb0\xcd\x3e\x4e\xe5\xf6\x57\xef\x40\xc2\xc3\xb6\x7e\x40\x09\x0b\x10\x4c\x30\x30\xc1\x39\x20\x70\x7f\x8b\x66\x5d\x6c\x9e\x71\xb4\x60\x82\x41\xb3\x5d\xf2\x10\xc8\x59\x72\x12\x28\x98\x60\x80\x7c\x47\x39\xc4\xf2\x47\xba\x29\xac\x60\x82\xc1\xf2\x35\x2b\xbe\x5e\x69\x9d\xd6\x25\x38\xdf\x5e\x04\x49\x3b\xf4\x53\x4b\xb1\xf8\x00\x46\x3b\x3a\x86\x2d\x7b\xf7\x36\x10\xd1\xa2\x07\x43\x99\x33\xe0\x4d\x44\x52\xab\xd1\xbc\x5b\x13\xed\x79\x1b\xbf\x2e\xba\x59\x94\x88\x6f\x59\xf4\xda\x8d\x9a\x80\xe8\x46\x6d\x7c\x74\x6b\xc3\xd8\xba\x8d\x5f\xbb\x59\x5e\x82\xe8\xb5\x1b\x87\x78\xdc\xfd\xed\xc2\xa8\x86\x2a\xa2\x7a\xf6\x6f\x6f\x30\xa7\xcb\xff\x85\xbb\xd8\xa7\xe3\xeb\xec\x7f\x01\x00\x00\xff\xff\xaf\x19\x78\x13\x3e\x1e\x00\x00")

func dom_js_bytes() ([]byte, error) {
	return bindata_read(
		_dom_js,
		"dom.js",
	)
}

func dom_js() (*asset, error) {
	bytes, err := dom_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "dom.js", size: 7742, mode: os.FileMode(420), modTime: time.Unix(1429303502, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _index_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x52\xcd\x6e\xf2\x30\x10\xbc\xfb\x29\xf6\x66\x47\x42\xe8\xfb\xd4\x1b\x88\x47\xe8\x85\x6b\x55\x55\x4e\xbc\x14\x97\xd8\x4e\xfd\x03\x45\x28\xef\x5e\xaf\x93\x90\xd0\xaa\x7b\x88\x6c\xcf\xee\xec\xcc\x6e\xce\xd2\x83\xc2\x2e\xc0\x0e\x5e\x18\xe4\xe0\xca\x99\xf5\x47\xe0\xec\x75\xcb\x18\xa1\xc6\xa9\xd4\xe2\x22\xa1\x95\x57\x97\x22\x5f\x0d\x37\x57\x07\xf4\x67\x59\xb7\xf8\xfb\xe5\x2d\x62\x88\x03\xd3\x21\xd9\x26\x6a\x67\xc1\xd9\x3d\x4a\x75\x05\x91\xfb\x54\x70\x63\xa5\xe6\x8e\x9a\xd3\xde\x5d\x40\xd8\x02\xc1\x18\x1e\x63\xf2\x16\x48\x18\xb6\x68\xd0\x46\x31\x83\x14\x56\x1a\xdc\x00\x97\xa3\x82\x29\x64\x8c\x5e\xd7\x29\x8b\xd8\xc0\xed\xe8\xf1\xb0\x01\x6b\xfa\xc7\x9c\x10\xaf\x6d\xae\xbd\x29\x1d\xba\x6c\x2c\xb3\xd4\xad\x6b\x4e\xfc\x47\x5a\xe3\x6c\xcc\x7d\x03\x31\xdc\x81\xbe\xda\x96\x73\x5f\xbe\xe5\x43\x03\xf3\xee\x32\x4f\x8b\xe2\x41\xf8\xa8\xf5\xf8\xc4\x57\x0b\x56\xfe\x3c\x4c\x99\xf7\x55\x29\xa3\x91\x4d\x7c\xb5\xcb\xe3\xda\xfd\x61\x7f\xa4\x53\xfa\xbc\x30\x3f\x99\x32\xd2\xbf\x6b\x9b\xe1\xff\xff\xba\xaf\xa5\xa5\xb9\x31\x89\x5d\xe7\x6b\x23\xa3\x18\x37\xbd\x36\xb2\x13\x65\x11\xd5\x20\x86\x7c\x96\x83\xc2\x83\xb6\x28\x48\x50\x7e\xea\x19\xf3\xf8\x99\xb4\x47\x41\x7f\xd0\x6a\x5a\x2d\x65\x7f\x07\x00\x00\xff\xff\x5f\x41\xef\x3c\x57\x02\x00\x00")

func index_js_bytes() ([]byte, error) {
	return bindata_read(
		_index_js,
		"index.js",
	)
}

func index_js() (*asset, error) {
	bytes, err := index_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "index.js", size: 599, mode: os.FileMode(420), modTime: time.Unix(1414646096, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _layout_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\x4d\x73\xda\x3c\x10\xbe\xfb\x57\xec\x29\x36\x13\x06\xde\x70\x84\x97\xe9\x64\xd2\xe9\xa1\x97\x66\xd2\xde\x12\x0e\xb2\x59\xb0\x3a\x42\x72\x25\xe1\xe0\x10\xfe\x7b\x77\x85\xc1\x1f\xf9\x3c\x56\x33\x60\x6b\xb5\x1f\xcf\xee\xf3\xd8\x1e\x8f\xa3\xf1\x18\xae\xe1\xbb\x28\xc5\xcf\xcc\xca\xc2\x83\x92\xa9\x15\xb6\x82\x95\xb1\x30\xf9\x0a\x4a\x54\x66\xeb\xc9\x2b\x62\xcf\x3c\x13\x3e\xb9\x8f\x45\x3c\x8c\x53\xfa\x65\xf1\x62\x00\xf3\xf9\x1c\x62\x91\x66\x31\x3b\x94\x6f\x3a\x3c\xe8\xf4\x41\x07\x27\xf6\xfb\x65\xa0\xd8\x7a\x70\x85\xc8\x10\x52\xf4\x8f\x88\x1a\x50\xe1\x06\xb5\x77\x43\xd8\x3a\x04\x9f\x23\xac\x45\x91\xe8\x5b\xb9\x43\xe5\x06\xb0\xda\xea\xcc\x4b\xa3\x47\x51\x54\x0a\x0b\x4b\x2c\x1c\xcc\xe1\x3e\x02\x5a\xf1\xd2\x6c\x46\xbf\x5d\x3c\x3c\xee\x4c\xea\xd0\x96\x22\x55\xc8\xc6\x68\x31\x8b\xa2\x53\x34\x18\x7d\x87\x62\x59\x25\x14\x31\x84\xc6\x71\x00\xfb\x28\x04\x13\xba\x50\x76\x50\xef\x4e\x46\x5e\x37\x16\x85\x47\xc0\x4d\xe1\xab\x1a\xbc\x59\x41\xac\x63\x28\x02\x48\x78\x94\x4b\x04\xa1\x97\x6d\x9b\x17\x4a\x8d\x42\x96\x33\x86\x63\x01\xaa\x08\xf5\xb2\xe8\xb7\x56\x03\x77\x51\x4f\x21\xd9\x6b\xb1\xc1\x29\x75\x26\xcb\x78\x08\xce\x57\x8a\x76\x7b\x2a\xe0\xf3\x29\x68\xb8\x84\xb8\xd8\xd1\x41\x8e\x72\x9d\xfb\xc6\x72\x38\x0c\x66\x21\xed\xe1\xdc\xce\x8d\xd1\x44\x0b\xea\x00\xbd\x9e\x71\x17\x0f\xb3\x26\x68\xee\x3b\xfa\x15\xc6\xb5\x91\x9d\x7d\x1c\xfa\x5b\xe3\x24\xdf\xbb\x64\xd7\xf1\xe1\xc5\x94\x54\x81\x90\xc5\xac\x73\xc0\x42\x4a\xf8\x54\xd2\xe1\x7f\x33\xba\xfc\x4f\x75\x46\x0a\xf5\xda\xe7\xbc\xbd\x9c\xc3\x55\x3f\x1b\xaf\xca\xdd\xcb\x05\xc5\xb4\x0a\x53\x5d\xb2\x1d\x31\x76\xab\x1c\x3a\xbb\x7a\x9c\x95\x6b\x9c\x1a\x07\xc6\xf2\xd4\x3a\x91\x2b\xa0\xbc\x20\xb5\xf3\x42\x67\x48\x84\xb6\xe4\xf3\xa3\x23\x90\x76\x8d\x27\x6e\x96\x1a\xd9\x10\x97\xed\xd9\xb4\x80\x1d\x68\xdc\xa4\xe4\x57\xe2\xfa\xc3\x7c\x0d\xe7\x87\x9a\xc8\x8c\xf6\xcc\xe5\x94\x72\xf6\x58\x7f\x8d\xb5\x04\xaf\x5e\xb0\xcb\xb3\xc0\x09\x01\xe2\x2a\x99\x32\x1a\xc9\xab\x85\x06\x27\xa3\xa0\x3c\xf2\x38\xdf\x7e\x09\xce\x1b\xb9\x93\x94\xb2\x36\xd6\x89\xa7\x7c\x99\xf5\x3b\xc0\xc9\x67\x14\x09\xb9\xb1\xf2\x89\x5a\xa2\xc7\xa5\x8a\x4e\xe0\x72\x42\x4f\xc5\xf7\x99\x73\xdf\x94\x11\x24\xf4\x58\xe1\xca\x73\xf7\x0a\x85\xa5\xad\x26\xd0\xf1\x61\xd6\x6d\x3b\x6f\x14\xdd\x6e\x97\xa9\x16\x0e\x2e\x2e\xc2\xa5\xc5\xf8\xb5\xb5\xa2\x82\xe7\x67\x10\x9f\x10\x42\x5f\x09\x3b\x46\x28\x5c\x57\x90\x22\xc0\x3e\xbc\x43\x6c\xfb\xa1\xe3\x36\xcf\x0c\xf2\xff\xbb\x93\x2a\xd1\x7a\x99\x75\xe6\x54\x7e\x38\xa7\xd4\xf8\xfc\x34\xa7\x53\xc4\x1d\xbf\x3b\x7a\x61\x96\x6d\x6f\xc4\x9d\xe7\x5b\xfe\xcb\xf3\xe5\xee\x0a\x73\x0c\x1a\x09\x25\xd7\xfa\xf8\x0d\x3a\x76\x46\xfa\x6d\x5a\x9f\x86\xfb\x17\x8a\xed\xbf\x0f\x5f\x30\xb3\xc4\x95\xa4\x67\xa5\xc1\xc9\x82\x9b\x86\xff\x61\x83\x23\xd8\xca\x8e\x8d\xde\xfc\x53\xfe\x3b\x26\xa4\xc4\xf4\x50\x58\xfc\xb3\x95\x16\x13\xfe\xa2\x0d\x4f\xdf\x27\x3a\x8a\xfe\x06\x00\x00\xff\xff\xd2\x26\xe3\x8d\x9f\x07\x00\x00")

func layout_js_bytes() ([]byte, error) {
	return bindata_read(
		_layout_js,
		"layout.js",
	)
}

func layout_js() (*asset, error) {
	bytes, err := layout_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "layout.js", size: 1951, mode: os.FileMode(420), modTime: time.Unix(1429220721, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _module_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\x4d\x8f\x9b\x30\x10\xbd\xf3\x2b\xe6\x06\xa8\x2b\xb2\x49\x6f\x9b\xa6\x97\xed\xf6\x50\xf5\x4b\x6a\x6e\x51\x0f\x14\x0f\x8b\x1b\xc0\x96\x6d\xd2\x44\x55\xfe\x7b\xc7\x31\x10\x20\x84\xac\x2a\x2d\x52\x14\xc5\xf3\xe6\xbd\x37\x1f\x26\xb3\x99\x37\x9b\xc1\xd3\x5e\xa2\xe2\x05\x96\xe6\x01\x62\x28\x04\xab\x72\x84\x44\x94\xda\xa8\x2a\x31\x42\x41\x4a\x1f\x77\xac\x23\x80\x75\xc6\x35\x88\x5f\xbf\x31\x31\xc0\x0b\x99\xa3\xcd\xd4\x60\x32\x84\xb5\xf8\x20\x0a\x28\xd0\x64\x82\x45\x44\xed\x79\x69\x55\x26\x86\x8b\xb2\xce\x0f\xc4\x3c\x84\xbf\x1e\xd0\xb3\x8b\x15\x88\x05\xac\xea\x9f\xf6\xe9\x68\x3e\xd4\x09\x77\x6d\x50\x61\xc9\x90\xce\x5b\xc6\xa0\xc0\xb0\x93\xdc\x70\xda\xb8\x26\xda\xcd\xcf\xe5\x45\xec\x24\x10\x5b\xb7\x97\x71\x5b\x64\x60\x41\x5b\xe0\x64\xf7\x82\xdb\x3e\x3c\xb5\xaa\x51\x16\xeb\x6f\x7f\xca\xef\x4a\x50\xdf\xcc\x21\xd8\x86\x63\xd8\x46\xd3\x1c\x48\xcc\x1c\x24\x8a\x94\x58\x37\xdb\x81\x6c\x97\xda\x42\x57\x2b\xf0\x9b\x12\xfd\x6b\xbc\x27\xbf\xb6\xce\x48\x56\x3a\x23\x03\xe3\x9c\x47\xc0\x5c\xe3\x04\x47\xdb\x8f\x1b\x3c\x17\xa7\xfd\x13\xf7\xeb\xa2\xdb\x8c\xef\xa8\x74\x26\x92\xca\x6e\x48\x94\x28\x8c\x0d\x3e\xb9\x7d\x09\x7c\x8a\xfa\x03\x3d\x3a\x8a\xb4\x39\xe4\x18\x15\xb1\x7a\xe6\xe5\x67\x4c\x0d\x31\xf8\xf3\x7b\xb9\xf7\x97\xe3\x22\x19\x53\x13\x22\xd9\x62\xa8\x41\xf8\x28\x96\x92\x96\xe9\x31\xe3\x39\x0b\x06\x99\x6b\xdc\x9b\xaf\x82\x61\xe0\x7f\x8a\x77\xf1\x8f\x44\x71\x69\xe0\xcb\x69\x15\xfd\x70\xc4\x6e\x97\x8a\xa8\xc3\x11\x97\x76\xb2\x6e\x58\x39\x96\xcf\x26\x83\xf7\x70\x3f\x36\x58\x87\xd1\x42\x99\x60\x64\x0e\x31\x63\x1f\xeb\xb5\xd0\x01\x29\xdf\x39\xfc\x00\x39\x32\x09\x2b\x7f\x9e\xf3\xb4\x85\x33\x6e\xc2\xc6\x63\x03\x72\x36\xda\x9c\xdb\x56\x14\x9a\x4a\x95\xb6\x6f\x67\xa8\x83\x1d\x97\xde\xe9\xbb\x7f\x09\xcf\x2f\x8b\xa6\x10\x31\xbf\x7d\xf9\xc4\x82\x2e\x19\xed\x84\x98\xf7\x2e\x5b\x2d\xe4\x74\x6a\x27\x62\xb1\xf4\x8e\x9d\x97\xd4\xb5\x26\x77\x5e\x59\x37\xf6\xed\x6d\xb3\x6f\x2f\xde\xb3\x56\xb0\xdd\xaf\xf1\xbd\xea\xf7\x87\x93\x89\xfb\x25\x7d\xbd\x83\xee\x6e\xd9\x93\x37\x2b\xe8\xf5\xcd\xc2\xf7\x04\x3f\xe1\x36\xbc\xd3\x12\x1b\x91\x13\xd5\xc8\xee\xe5\x91\x3d\x4f\xc3\x9c\xb6\x9e\x7d\x08\x9d\xa4\x61\x29\xb2\x8e\x1d\x87\x6d\xbf\xba\x54\xaf\xd9\xfa\x56\xf4\x7f\x5b\x3f\xbc\x57\xd7\xda\xbf\xa5\x94\x16\xfb\xea\x23\xd8\xbe\x7c\x04\x0c\x53\x5e\x62\xe0\xdc\xba\x7f\xdc\xe6\x9f\xd7\x3b\xda\xca\xff\x05\x00\x00\xff\xff\x67\xf0\x5e\x07\x22\x08\x00\x00")

func module_js_bytes() ([]byte, error) {
	return bindata_read(
		_module_js,
		"module.js",
	)
}

func module_js() (*asset, error) {
	bytes, err := module_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "module.js", size: 2082, mode: os.FileMode(420), modTime: time.Unix(1414646096, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _observable_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\xcd\x8e\xe3\x36\x0c\xbe\xfb\x29\xb4\x97\x1d\x07\x08\x3c\xc0\x1c\x13\x04\xc5\x00\x2d\x50\xf4\xd0\x5d\x60\x81\x5e\x06\x73\x50\x14\x3a\x56\xe3\x48\xae\x24\x67\x1a\x2c\xf2\xee\x25\xe5\x1f\x29\xb2\x9d\x62\x57\x87\x19\x87\x14\x49\x91\xfc\xf8\x49\xcf\xcf\xd9\xf3\x33\xfb\xb2\xb7\x60\x2e\x7c\x5f\x03\xfb\xe3\x1b\x0a\x32\x12\x7e\x6d\xf7\xb5\xb4\x15\x18\xcb\xb8\x3a\xb0\x6f\xed\xde\x0a\x23\xf7\xf4\xdb\x56\xdc\x00\x73\x15\x44\x96\x64\x22\x95\x03\x53\x72\x01\x6b\xf6\x51\x49\x51\xa1\x40\xd4\xed\x01\xd0\x03\x3b\x82\xcb\x57\xde\x93\x1d\x3c\xe5\x2b\x32\x2a\x5b\x25\x9c\xd4\xaa\xc8\x86\xaf\xc8\x2b\x9a\x7c\xcf\x6e\x59\x16\x24\x45\x63\xb4\xd3\xee\xda\x40\x31\x3a\x62\xbb\xd1\x4b\x5e\x92\x05\xc3\x25\x4b\x96\x7f\x72\x95\xb4\x61\x9f\xb1\x83\x92\x56\xaa\x43\x2f\x6f\xe5\xfb\xd6\xeb\x6f\x0c\x6a\x0b\x0f\x36\x17\x4d\x6b\x2b\x0c\xd6\x6f\xf7\x7f\x0d\xb8\xd6\x28\xbf\x75\x9b\xdd\xb6\xbe\x8a\xba\x38\xf3\x86\x0e\x25\xa9\x08\xb6\xd2\xc6\x55\x54\x84\x52\x1b\xa6\x43\x52\xc1\x73\xfe\xa6\xdf\xd7\xac\x5c\xcd\xa7\x8c\xce\x66\x93\xed\x43\xc7\x6e\xe8\x18\xde\xd3\x78\x96\xa8\xcd\x17\x5e\xb7\x60\xb3\xb1\xc7\x21\x04\xba\x57\xf0\x71\xd7\x82\xed\xdc\xbe\x42\x68\x65\x9d\x69\x85\xc3\x4c\x76\x01\x2d\x18\x6a\xec\xe3\x28\xcc\x2f\xc3\x41\x7d\x1d\x7d\x74\x34\xba\x6c\xa9\xb7\x73\xce\x2d\xb8\x38\xcf\x45\xf3\xa1\xd1\x8f\xfa\x7c\xe1\x86\x9d\x69\x7f\xd7\x98\xc5\x8e\x62\x4b\x7e\xe3\x02\x9b\x3a\xa9\xee\xb0\xca\xfc\x0c\xab\xe0\xe1\xf6\xb8\xfb\x73\x79\x1d\xef\xf3\x4a\xda\x17\xb2\xeb\x3c\x24\x4d\x13\xfa\xdc\xb4\x8e\x93\xa5\x2d\x58\xdc\xec\x15\x73\xfc\xe4\xc7\x0c\x23\x3a\xa6\xcb\x08\x5b\x96\xbc\x10\xe4\x38\x13\xbc\xae\xf7\x5c\x9c\xc6\x03\x78\x79\x17\x9c\xa6\x3c\x46\x24\x63\xaf\xea\xca\x9c\x3c\xfb\xc9\xe6\x1d\x62\x08\xc5\x06\xfe\x41\xe8\x38\x38\xb0\xd7\x3f\x7f\x25\x23\xa9\xf0\x54\xac\xe2\x96\x09\x84\xf6\x11\x0e\x6b\x4f\x0d\x47\x79\x01\x35\x86\xf4\xf4\x60\x19\xfc\x0b\xa2\x75\xb4\x85\x22\x4b\x67\x87\xd4\x23\xf7\xf4\x1b\x0e\x45\x16\x18\xe7\x7f\xd0\x39\xb7\x31\x81\x67\xd8\xb2\x0d\xf0\x0c\xc2\x9c\x9b\xa3\xa5\x59\x49\x60\x26\x0f\xd4\x2d\x8e\x54\xb0\x0d\xf2\x92\x64\xd1\x6f\xb2\x45\x11\xfd\xc3\x9e\x4d\x11\xc7\x18\xe6\xfe\x7a\xd1\xe8\xec\x89\x04\x4f\x8c\x9f\xf7\xf2\xd8\x4a\x77\x2d\xfc\x76\xb2\x9c\xa2\x4f\xc7\xe8\x23\x8c\x6b\xac\xb4\x75\x5c\x09\xc0\xfe\x86\x0a\xa4\x20\xd5\x01\xd4\xa3\x33\x34\xde\xdb\x74\xe3\xe0\xf7\x0c\x5d\xaa\x73\x7a\x5a\x83\xfe\xbe\x14\x0b\x9e\x16\x66\x70\xc6\xe7\x8f\x8d\x5e\xba\x92\x51\x4c\xd7\x6d\x41\x77\x9b\x48\xef\x25\xb1\x5d\xa7\x21\x09\x92\xd4\x2c\xc6\xe6\xa7\x79\xe4\xa3\xfb\xaa\xce\xcc\x38\x4b\x2f\x1a\x02\x0e\xea\x6c\x0f\x1d\x0f\xad\xee\x02\x09\xa8\x88\xea\xd2\xbb\x5c\x00\x06\xfb\x05\xb1\xd0\x5d\xbb\x1b\xa6\xfb\xbc\x28\x9d\x10\x4b\xd7\x87\xbf\x7a\x32\x4d\xce\x95\x50\x6d\x07\xfc\x82\x37\x4d\x7d\xcd\x55\x5b\xd7\x6b\x7f\xce\x55\xb2\xd7\x83\x04\xa7\x0e\x86\x20\x71\x2d\xd0\xd1\xa7\xdd\x2e\xc4\xfc\xfc\x79\xc2\xc1\x77\x5d\x5f\xe0\xed\x9f\x21\xee\x09\x5c\xc6\x3e\xdf\xb2\x87\xdd\xf1\x34\x3c\x4e\x91\x5d\x24\x8c\xde\x9c\xb8\x69\x86\x55\x3c\x82\x90\x04\x7e\x47\xd2\xbb\x06\xf2\x75\x1a\xe9\xba\x74\x48\xae\x86\x7f\x04\x31\xbe\xa2\xb4\x67\xd0\xc0\xc6\xe8\x9f\xd7\xe7\x70\x10\x32\x9b\x5c\xfe\x93\x5b\xa5\xaf\x61\xcf\x4f\xaf\xc6\xf0\x6b\x7c\xc5\xd6\x52\x20\x4d\x22\x3f\xd3\x39\xdb\x33\x28\x67\x43\x89\xa6\x0f\x8a\x90\x8c\xaf\x9b\xcf\x69\x3e\x29\xc1\x1b\x34\xee\x1e\x88\xa2\x35\x06\x3d\x33\xc4\xa7\x03\xba\x98\xfc\x2d\xf3\x37\x08\x87\xd7\x99\x72\x5c\x2a\xa9\x8e\x77\xb7\x55\xa8\xb6\xe2\x0d\x3e\x98\x5c\x60\x42\x8f\x26\x3c\x3b\xdd\x6f\x6c\x87\x58\x7a\xea\x5c\x3d\x4d\xa8\xd2\x8f\x26\x02\x2c\x22\xc3\x14\x13\x43\x86\x43\x94\x71\x58\x62\x0a\x48\x9f\x81\x21\xc0\xdd\xfd\xb2\xeb\xcb\x3b\xc7\x5a\xc3\x90\xfa\x39\x1e\xa2\x25\xf4\x34\x1b\x67\xe8\x9f\x7e\xc1\xee\x7d\xbf\x4d\x09\x8d\x94\xa7\xa9\x98\x9e\x96\xf9\x09\x61\xc4\xf4\x12\x8b\x76\x29\xe0\x95\xfd\xe5\x43\x7d\x35\xba\x01\xe3\xae\xf9\x69\xf5\x88\x74\xf5\xcb\xdb\xe9\x1d\x0f\x12\xba\x82\xbf\x7f\x92\x65\x69\x0d\x65\x79\x49\x2a\x91\xd2\x6f\x5a\x99\xc1\x6e\x78\x7a\xdd\xa2\xf9\x6c\xa6\xef\xcd\x68\x30\xe3\xd7\xa8\x47\xef\x01\x4a\xa9\x20\xef\x36\x06\xde\xdc\x44\xdf\x6b\xaf\x1b\x2d\x37\xe1\xb3\xd3\x34\x41\xd3\xdc\x6b\x02\x0d\x6c\xa2\xef\x4e\x67\x23\x9d\x4d\x74\x34\xda\x1b\xff\xb7\xdf\xdb\xd7\x7b\x33\x7e\xad\x3b\xca\xc2\xd1\x3b\x40\x63\x40\x70\x7a\x8b\x21\xf7\x72\x8b\xd3\xe3\x5b\xe5\x8f\x0f\x93\x23\xb9\xaa\x55\xa7\x38\x62\xe6\x6f\x83\xff\x02\x00\x00\xff\xff\x72\x50\x75\x92\x04\x0e\x00\x00")

func observable_js_bytes() ([]byte, error) {
	return bindata_read(
		_observable_js,
		"observable.js",
	)
}

func observable_js() (*asset, error) {
	bytes, err := observable_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "observable.js", size: 3588, mode: os.FileMode(420), modTime: time.Unix(1427491422, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assert.js": assert_js,
	"dom.js": dom_js,
	"index.js": index_js,
	"layout.js": layout_js,
	"module.js": module_js,
	"observable.js": observable_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"assert.js": &_bintree_t{assert_js, map[string]*_bintree_t{
	}},
	"dom.js": &_bintree_t{dom_js, map[string]*_bintree_t{
	}},
	"index.js": &_bintree_t{index_js, map[string]*_bintree_t{
	}},
	"layout.js": &_bintree_t{layout_js, map[string]*_bintree_t{
	}},
	"module.js": &_bintree_t{module_js, map[string]*_bintree_t{
	}},
	"observable.js": &_bintree_t{observable_js, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

