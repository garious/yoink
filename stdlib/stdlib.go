package stdlib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _assert_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x52\x4d\x6f\x9c\x30\x10\xbd\xfb\x57\xbc\xee\x21\x18\xa5\x4a\xee\xbb\xda\x43\x2b\xe5\x9c\x1e\x7a\x2b\x3d\xb8\x30\x10\x97\xdd\x31\x6b\x9b\xd2\x55\xc5\x7f\xaf\xcd\x57\xd0\x96\x48\x95\x62\x09\x69\xc6\x8f\x99\xf7\xe6\x79\x1e\x1f\xf1\xf5\xc5\x9a\x0e\x8a\x41\xbf\x73\x6a\xbc\x36\x1c\x92\x02\x64\xad\xb1\x38\x93\x73\xaa\x22\xe8\x12\xbe\x33\x50\xb6\x6a\xcf\xc4\xde\x85\x88\xc0\xc6\x83\x2e\xad\x3a\x89\xb2\xe5\x7c\xa8\xa4\x8b\x54\xb9\x0f\x57\x1f\x43\xbb\x86\x72\x4f\x45\x8a\x3f\x02\x88\x1d\x26\x08\xc7\xe3\xf1\x16\x8d\xc7\x92\x6f\x2d\x1f\x62\xda\x83\x4e\x6e\x60\x95\xfe\xda\x90\x29\xb1\x2a\x4d\xcc\x8f\x9f\xa1\x36\x59\x95\xfe\x52\x16\xf5\x61\xce\xca\x20\x5c\xd6\xd0\xbc\xc5\x82\x49\xcb\x0c\x3d\xbc\x28\xf7\xdc\xf1\x17\x6b\x1a\xb2\xfe\x2a\xeb\x14\x77\x77\xa8\xf1\x21\x32\xe5\x86\x9d\xb7\x6d\xee\x8d\x4d\x6e\x7a\x0c\x67\x19\xf7\x5b\xfd\xfd\x75\xe2\x90\xa4\x87\xf5\xbf\xbd\xb8\x0d\x5e\x25\x8e\xf5\x1b\x02\x47\xe0\x5d\xf2\xd6\x73\x06\x51\x83\x7b\x2d\x17\x54\x6a\xa6\x22\xf6\x59\xc4\x0f\xfd\x16\x68\xab\xd7\x6c\xb3\xf3\x2a\xaf\x71\x04\x53\x87\xa7\xb8\x23\x32\x7d\x18\xee\x0e\x9b\x25\x3e\x6e\x97\xdc\x7d\x72\x2e\xc8\x8f\x1b\x52\x2a\x7d\x0a\xae\x67\xfc\x3c\xbc\x22\xb4\xc3\x59\x3b\xa7\xb9\x42\x4d\xd7\x3d\x76\xb8\x0f\xe3\xdd\x23\xc9\x38\xe3\x24\x04\x72\xc5\x34\x51\xa5\xff\x72\xf5\x6f\xfb\x3d\x2d\xd3\x32\xd2\xdb\x92\x9e\x26\xaf\xf6\x19\x47\x19\xb3\x75\x21\xdc\x65\xfc\xb9\xf5\xa8\x8c\x9f\xb0\x69\x1f\xff\x47\x67\x2f\x7a\x21\x46\x67\xe5\x28\x82\x2e\xfb\xf0\x89\x3e\xe0\xe2\x6f\x00\x00\x00\xff\xff\x1c\xe6\x04\x4f\x82\x03\x00\x00")

func assert_js_bytes() ([]byte, error) {
	return bindata_read(
		_assert_js,
		"assert.js",
	)
}

func assert_js() (*asset, error) {
	bytes, err := assert_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assert.js", size: 898, mode: os.FileMode(420), modTime: time.Unix(1418359115, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dom_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x59\x5f\x6f\xdb\x38\x12\x7f\xf7\xa7\xe0\xbd\xac\x1c\xac\xab\x36\xe9\x5b\x7c\xb9\x45\xae\x5d\x60\x77\xb1\xbd\xdc\xed\x16\x58\xdc\x05\x01\x96\x96\xc6\xb6\x1a\x99\xf4\x91\x94\x63\x23\xf0\x77\xbf\x19\x52\xa4\x48\x49\x4e\x9d\xab\x1e\x1a\x8b\xe4\xfc\x38\x7f\x7e\x9c\x19\xaa\x6f\xdf\x4e\xde\xbe\x65\x9f\x64\xd9\xd4\xc0\x04\xdf\xc0\xf5\xc4\x0d\xd1\x53\xca\x4d\xfb\xf6\x11\x74\xa1\xaa\xad\xa9\xa4\x88\x17\x64\xb8\x22\x63\x95\x66\x9c\xfd\xc2\x77\xfc\x77\xbb\x86\x6d\x1c\xda\x52\x2a\x56\x28\xe0\xa6\x12\x2b\xf6\xd3\xe7\x4f\xbf\x32\xa8\x61\x03\xc2\xe8\xdc\xcb\x7f\x5e\x83\x5f\x0d\xfb\xad\xd4\xa0\x99\x79\x92\x4c\x2e\xbe\x40\x61\x58\x21\x85\x36\xaa\x29\x8c\x54\x7a\xc6\x32\x8b\x05\x3f\x3a\x8c\x8c\x71\x51\xb2\xac\x45\xcc\x12\xc4\x65\x23\x0a\xd2\x14\xd5\x2a\x0a\x40\x85\x0c\x0e\x6a\xb4\x8d\x71\xb5\x6a\xac\x06\x33\x14\x77\x3a\x19\xbe\xb2\x76\xdb\x11\x6e\x8c\xaa\x16\x8d\x01\xed\xf1\x9c\x2a\x6e\x52\x29\x7e\x60\x72\xc9\x74\xb3\xf0\x96\xcc\xac\x1a\x38\x09\x3b\x7c\xfd\x09\x5f\x6a\x50\xba\x95\xca\xad\x3a\xc1\x99\xd5\x72\x09\x0a\x44\x01\xe4\x30\xb3\xe6\xa6\x53\x9f\xa1\xed\x66\x2b\x05\xd9\x8f\xba\x3a\xaf\x49\x41\x9b\x21\x76\x23\x4a\x50\xf5\x81\xdc\xf8\xf1\xee\x93\xc7\x6b\x65\x67\xec\x69\x8d\xb0\x5c\x0f\x1c\xe4\x5e\xb5\xd5\x50\x81\x69\x94\x70\xe8\x88\xe1\x85\xf3\x28\x96\x89\xf4\x74\x7f\xc1\x6e\x6e\x6e\xfc\x3a\x7c\xcd\x51\x75\x54\x63\x7a\x11\x89\xfc\xfd\xe0\x15\x27\xdd\xfa\x9a\xb7\x7b\xa1\x82\x38\x6e\xcd\xa8\x30\x14\xa0\x3d\x41\x82\x8f\xad\x2f\x9c\x86\x7e\xc3\xd6\x83\x9a\x3d\x55\x66\x2d\x1b\x9a\xfe\x6f\x53\x29\xda\x86\xb3\x85\x92\x4f\x1a\x14\x43\x7e\x85\x17\x8f\xa5\xab\x4d\x53\x73\x64\x0c\x46\xa9\x58\x33\x74\xcb\x2f\xfa\xa3\xdc\xd0\xda\xff\xc8\xcd\xa2\x02\x0c\xca\x2d\x5b\x70\x05\x6f\x16\xd6\xdf\x11\x6f\x2b\x61\x40\x6d\x51\x91\x08\xae\x05\xf9\x87\x2c\x21\xff\x42\xea\xd4\x35\x0e\x2e\x97\x55\x01\xb1\xf3\xfe\x75\xcd\xfe\x20\x2b\xaa\x25\xdb\x1c\x18\xdf\x6e\xeb\xaa\x70\x8e\x28\x0f\xc8\x2e\x7c\xa9\xeb\x03\x6b\xb6\xa5\x8d\x88\x44\xd7\xa8\x60\x6a\x47\xba\x1f\x22\xc4\xdb\x6b\xf6\x33\xd2\x1f\x78\x69\x29\x07\xc6\x78\x1f\x87\xf5\x48\x29\x85\x4e\xaa\x0f\x33\x3a\x3d\x0a\xb4\x8b\x6f\x09\x5b\x0a\x95\x28\x0e\xd6\x7b\x1e\x10\x1f\x0c\xc2\xdd\x02\x9d\xb5\xe3\x0b\x3c\x71\x3b\xae\x2a\xfa\x81\x1e\xf9\xb7\x6c\x94\xa3\x30\x5b\x3b\x0e\x33\x8d\x6e\xaf\x4b\xda\xd8\x82\xca\x20\x17\xe1\x79\x04\x4b\xb1\x83\xc5\x68\x6d\x6a\xa5\x17\xd0\x1d\x62\x28\x59\xa3\xbd\x0d\x1d\x5c\x7a\x48\x5c\xd2\x61\x75\xb5\x50\x5c\x1d\x9c\xbb\x4b\x0c\x48\xd1\xd7\x22\xf2\x02\x6d\xee\x3c\xeb\x29\x17\xa1\x05\x27\x8b\x03\x33\x15\xa6\x80\x0a\x49\xb5\xe3\x75\x83\x9a\xa1\xa9\x2b\xd0\x6d\x18\x93\x48\x1e\x50\x0b\xd0\x22\x33\xe1\x00\x5c\x30\xde\x18\xb9\xc1\x98\xba\x50\xba\xd3\x12\x29\xa4\x6d\xbe\x43\x1f\xa2\xda\xad\x50\xec\x79\xaf\x6d\xde\x0b\xf1\xd2\xf9\x2d\x66\x0c\x66\x87\x0d\x9e\x2a\xdc\x44\x1b\xda\x8f\x5c\x68\xec\x49\x0f\xd9\x94\xec\x84\xbd\x51\x3c\xda\xc2\x9f\x98\xc2\x7a\xbe\x84\x9a\x5b\x00\x65\x9a\xad\xb3\x9c\xfc\x44\xd1\xc0\x0c\xc8\x36\xb0\x91\xa8\xa8\xa5\x53\xb7\x75\x12\x05\x67\xbf\x00\x28\xad\xce\x93\x09\x46\x9b\xb8\xa5\xd9\x0d\xbb\x9f\xd8\xec\x1f\x45\xf1\x8b\xce\x26\x0f\xf3\xc9\xc4\xe7\x5e\x26\xc5\x6f\xc8\xdd\xc3\xb4\x5b\x73\xc1\x9e\x27\x56\x0e\x77\xb9\x2d\x91\x5a\xe6\x80\x71\xcc\x74\x66\x69\xda\x06\x25\xb3\xa3\xf7\xfa\x21\x63\x46\xf6\xd3\x15\x26\x4c\xcc\xf4\x04\x11\xb6\xe1\x65\xf9\x3b\x49\x4c\x31\x81\x63\x5e\xa6\x2a\xb5\x00\x35\x73\xe0\xf8\x87\x36\xf5\x36\xe1\xe1\x9c\x7a\x78\x3c\xec\xe8\x1c\x4c\xc6\x78\xb8\x22\x33\xee\x12\x6d\x59\xf4\x40\x1e\x44\x6f\x98\xff\x99\xaf\x00\xa9\x31\x4f\x16\x92\x9b\x64\xbc\x66\xc3\xb7\x53\xaf\xef\x74\x87\xb8\x09\xd4\x6e\x7e\xec\x01\x74\x66\xe4\x68\xdd\xad\x5a\x4d\x65\xb4\xe2\x88\xce\xd0\x70\x8e\x72\x91\xcc\xc4\xfd\x1b\x7b\xbf\x3b\x3f\xd9\x63\x1a\x81\xdd\x49\xd7\xa3\xf4\xcf\x36\xaf\x7b\xa0\x00\x92\xf9\x43\x85\xe4\xcd\xa8\x5e\x2d\x2b\x01\x65\x36\xc3\xe3\xe6\x0e\x31\x66\x82\x6a\x25\xa4\x42\x36\x9d\x05\x82\xa9\xaa\x0b\xcb\x8c\x96\x8b\xb1\x33\x5c\x69\x8f\x92\xec\x9a\xa6\x49\xaf\x80\x42\xd2\xef\x88\xce\x7d\x06\xdd\xfa\xa5\x7d\x16\x3d\xce\xd8\xae\xcf\xa0\xdd\xab\xa9\x43\x8c\x40\x75\x29\xd8\x63\x84\xb1\xa0\x38\xfd\x17\xac\xb7\xc1\x88\x3e\x46\x1b\x65\x30\x9d\xae\xa4\x1c\xaf\x7b\x60\xc7\x51\x2e\xee\x86\x24\x1c\xa0\x3b\xdb\xbe\xaa\xc4\x09\x45\x7a\x6a\x58\x55\xc6\x98\xda\x41\xb8\x68\x44\x28\x63\x10\xa9\x6d\xdf\x7e\x50\xce\x34\xf2\xeb\x06\x1e\xc7\x0f\x57\x60\x15\xca\x7f\x58\x57\x75\x89\x5d\xd3\x34\x66\x14\x12\x6c\x9f\x24\x25\xc8\x2b\x21\x40\xd9\x5e\xf4\x86\x65\x59\xb7\x0d\xd5\x93\x29\x45\xb0\xc2\x89\x77\x73\xfc\xf3\x57\x94\xcd\x6b\x10\x2b\xb3\xc6\xd7\xef\xbf\x1f\x23\xda\x1e\x17\xef\xf5\x7d\xf5\x90\xea\x4b\xc3\xe6\xb0\x25\xce\xee\x6d\x67\x87\x89\x96\xda\xa9\x8c\xfd\x80\xb9\xbe\xb0\x5d\x71\xee\x8a\xda\x67\xac\x2c\xd4\xef\x50\x0f\x78\xcd\xf6\x43\xb2\x7a\x9c\xb6\x25\x74\x70\xde\xf2\x6c\xcc\x9f\x56\xa9\xd0\x41\x0e\xe3\x9c\xa0\xe2\x11\x39\x03\xd2\x8b\xc5\x24\x50\x2b\x8d\xde\x2c\x61\x7f\xb7\xf4\x0d\xec\x9b\xcb\x53\xc2\xf4\x0c\x19\xb4\x1f\xd1\x8e\x9e\xe3\xe8\xa8\xb3\x6b\xe4\x4c\x0f\x45\x8e\xbd\x84\x8d\x65\x17\xdd\x61\x39\x92\x6c\x1a\xe8\xe4\x13\xdb\x07\xd7\x69\xf0\x24\x1b\xdb\x7c\xed\xaf\x2e\x2c\x13\x1b\x4c\x7a\x5d\x1f\xe9\x2f\x50\x19\xd7\x59\x5b\x0a\xc3\x10\xbe\x65\xb3\x90\x7a\xc7\x6f\x35\x2c\xdb\x93\x60\x7b\xb5\x69\x25\x71\x49\xd2\x21\xe2\x2a\xd0\xfd\x72\x9c\x5e\x22\xb6\x3a\xd4\x7c\x1f\xae\x36\xca\xd4\x45\x44\x24\xec\xc7\xc8\x36\x19\xcf\xf6\x3a\x8a\xbf\x8f\xb1\x77\xc2\xcf\xce\x35\xe4\x18\x81\x84\x0d\x53\x74\x0e\x00\x11\x7a\xc4\xee\xd4\xca\x09\x1a\x9d\x3e\x02\xc6\x23\x52\x50\x1d\x7c\xe2\x86\xae\x00\x58\x7a\xa2\x5e\x2f\x4f\xb6\x8a\x04\x6e\xe2\x8a\xd0\x8d\x4f\xef\x1f\x66\xc1\x49\xd3\x8b\x67\x7f\xd9\xb1\xb5\x3f\x56\x22\xa9\xcc\x3a\xd9\x85\x93\x4f\x50\xf5\x6e\x7a\x9e\xcc\x3f\xce\x13\x47\x73\xdd\x77\xaa\xcd\x27\x8f\x58\xbd\xd8\x70\xae\x93\xca\xd7\x5c\xdf\x3d\x89\x7f\x2a\xb9\x05\x65\x0e\x98\x96\xd9\x77\xdf\xb1\x47\x9b\x33\x5d\x73\x96\xd1\x00\xd7\xf7\x8f\x0f\xe7\x55\x8b\xaf\x14\x58\x8b\xf4\x8a\xe3\x73\x1c\x38\xcc\x36\x80\x69\x44\x2c\xe5\xad\xbb\xec\xcf\xf9\xb0\x07\x1c\xf5\x8e\x95\x25\x0f\x8d\x2e\x49\xe4\xfb\x7e\xd2\xd6\x4f\xa1\x0d\x3b\xd7\x33\x2f\x37\xaf\xdf\xe2\x95\x82\x52\x4b\xf8\xe4\x92\xb8\x67\xdf\x52\xa9\xbd\x58\xe8\xd4\x3d\xfb\x01\x3b\xe2\xf4\xfc\xf2\xc1\xa5\x27\xcd\x6d\x27\x8b\x8b\xbe\xe8\x97\xd4\x53\xfd\x82\x53\xea\xd5\x6d\x57\x6a\x31\xae\xb3\x95\x71\x3c\xbd\xef\xdd\x24\x2e\x3a\x95\xcd\x3d\x92\x0c\x0b\x93\x96\x0a\xcd\x79\xa1\xcc\xbc\xd8\x0c\x9c\x28\x38\x27\xc6\x5f\x6e\x7a\x82\xf4\x60\xe4\x35\x3a\xbc\x44\xab\xb4\x06\xa4\x29\xb7\xa5\x95\x9f\x9c\x8f\x65\x7e\x68\x09\xe4\xaa\xca\x80\x40\x5d\x92\x82\x93\x49\x0a\x46\x92\xd4\xe9\x56\x15\xbd\xf4\x23\xe9\xfc\x6b\xa5\x91\xec\x98\x8b\x31\xe7\xc0\xff\x9f\x73\xc6\x7a\x0e\xd7\x92\xb1\xbf\xb1\x77\x7d\x35\xda\x44\xdf\x09\x8c\x96\xb2\x50\x0e\x7a\xf7\xb4\xdf\xdc\x38\x67\x45\x2d\x05\xf8\x6f\x6a\x95\xd8\x36\xfe\x03\x59\xfb\x49\x65\xab\xa4\x91\xe4\x60\x9c\x5c\x83\xaa\xec\x39\xe9\x95\xe6\x0f\x84\x31\x45\x05\x8f\xbd\x92\x6d\xc7\x65\xac\xb9\x5d\x9a\x77\xa0\x58\xd5\xe6\x7d\x65\x05\x3c\x79\xc8\x13\x6a\x93\xae\x8d\x68\x3f\x06\x66\xf2\xb2\xfd\x64\x2b\xaf\xe8\x22\xf9\x07\x5d\xe8\x16\x12\xbd\x46\x49\x88\x57\x22\xbe\x11\xda\x6f\xb5\x8f\x70\x70\x17\xb9\xf6\xa6\x27\xac\x28\x36\x3d\x8f\x48\xa1\xad\x82\x02\xe8\x1b\x57\xdf\xca\x4d\xb5\xaf\xc4\x54\x5e\xce\x98\xbc\x8a\x4d\xb2\x47\xf7\x3d\x75\x15\xc7\x93\x65\xb3\xe3\x9e\x1c\x74\x8d\x14\x76\x79\x79\x1e\xef\xe4\x7b\xaa\x8d\xe8\xb4\x4b\xfc\xfb\xf2\xb5\xa1\xb7\xed\xd5\xe8\xb6\x57\xe3\x35\x59\x5e\x9d\x55\x82\x83\x36\x57\x67\x69\xd3\x86\x57\xbe\xef\x47\xb5\x86\xa5\x79\xb3\x94\x75\x99\x34\x94\xe1\xfe\x5d\x70\x5d\xf0\x12\x6c\x3d\xd3\xb6\x86\xd0\x31\x7f\x3e\xb2\x3f\x6d\x48\xfe\xa4\x4b\xc9\xbb\x87\xf8\xed\xb2\x7b\xcb\xf3\x3c\x9e\x79\x73\xf9\xd0\xe3\xe8\x00\xfc\xb9\xaf\x30\xde\x8c\x14\x94\x4d\x01\x53\x8b\x33\xc3\xad\xfb\xc4\xf4\xaa\xfa\x6f\x7a\xcf\xed\x77\xff\xd0\x50\x85\xca\xeb\x0b\xe3\x2c\x24\xba\xe3\x45\x0c\x12\x14\xf3\x2d\x25\x3f\xd9\xe9\xf2\x97\x0b\x26\x8f\x3a\x5d\x7e\xa2\xd3\x35\xeb\xca\x75\xac\xb8\x94\xbb\x5f\xf3\x49\xaf\xd9\x8b\xda\xc2\x01\x25\x1c\x40\xb4\xc0\xc2\x44\x7d\x64\x14\xfe\x16\xcd\x85\xd8\x3e\xe3\x68\xd1\x02\x8b\xe6\xda\xac\x21\x90\xf7\xe4\x49\xa0\x68\x81\x05\x0a\x3d\xc9\x10\x2b\x5c\x3c\x4e\x61\x45\x0b\x2c\x56\x28\x44\xe9\x25\xbd\x0d\x5a\x97\xe0\xc2\x45\x36\xea\xd1\xe3\x38\xb5\x14\x4b\x6f\x11\xb4\xa3\x67\xd8\xbc\x77\xfb\x87\x84\x16\x3d\x18\xca\x9c\x11\x6f\x12\x92\x3a\x8b\xa6\x9d\x4c\xb2\xe7\x75\xfa\x3a\xeb\x56\x51\x22\xbe\x66\xc9\x6b\x37\x6b\x0f\x44\x37\xeb\xce\x47\x27\x1b\x9f\xad\xeb\xf4\xb5\x5b\x15\x34\x48\x5e\xbb\x79\x48\xe7\xfd\x17\x70\x6b\x1a\x9a\x88\xe6\xb9\xff\xc1\x81\x29\x7d\x42\x9e\xf9\xcf\xc3\x74\xfd\x99\xfc\x2f\x00\x00\xff\xff\x3a\xe3\xad\x77\x84\x1c\x00\x00")

func dom_js_bytes() ([]byte, error) {
	return bindata_read(
		_dom_js,
		"dom.js",
	)
}

func dom_js() (*asset, error) {
	bytes, err := dom_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "dom.js", size: 7300, mode: os.FileMode(420), modTime: time.Unix(1429335738, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _index_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x52\xcd\x6e\xf2\x30\x10\xbc\xfb\x29\xf6\x66\x47\x42\xe8\xfb\xd4\x1b\x88\x47\xe8\x85\x6b\x55\x55\x4e\xbc\x14\x97\xd8\x4e\xfd\x03\x45\x28\xef\x5e\xaf\x93\x90\xd0\xaa\x7b\x88\x6c\xcf\xee\xec\xcc\x6e\xce\xd2\x83\xc2\x2e\xc0\x0e\x5e\x18\xe4\xe0\xca\x99\xf5\x47\xe0\xec\x75\xcb\x18\xa1\xc6\xa9\xd4\xe2\x22\xa1\x95\x57\x97\x22\x5f\x0d\x37\x57\x07\xf4\x67\x59\xb7\xf8\xfb\xe5\x2d\x62\x88\x03\xd3\x21\xd9\x26\x6a\x67\xc1\xd9\x3d\x4a\x75\x05\x91\xfb\x54\x70\x63\xa5\xe6\x8e\x9a\xd3\xde\x5d\x40\xd8\x02\xc1\x18\x1e\x63\xf2\x16\x48\x18\xb6\x68\xd0\x46\x31\x83\x14\x56\x1a\xdc\x00\x97\xa3\x82\x29\x64\x8c\x5e\xd7\x29\x8b\xd8\xc0\xed\xe8\xf1\xb0\x01\x6b\xfa\xc7\x9c\x10\xaf\x6d\xae\xbd\x29\x1d\xba\x6c\x2c\xb3\xd4\xad\x6b\x4e\xfc\x47\x5a\xe3\x6c\xcc\x7d\x03\x31\xdc\x81\xbe\xda\x96\x73\x5f\xbe\xe5\x43\x03\xf3\xee\x32\x4f\x8b\xe2\x41\xf8\xa8\xf5\xf8\xc4\x57\x0b\x56\xfe\x3c\x4c\x99\xf7\x55\x29\xa3\x91\x4d\x7c\xb5\xcb\xe3\xda\xfd\x61\x7f\xa4\x53\xfa\xbc\x30\x3f\x99\x32\xd2\xbf\x6b\x9b\xe1\xff\xff\xba\xaf\xa5\xa5\xb9\x31\x89\x5d\xe7\x6b\x23\xa3\x18\x37\xbd\x36\xb2\x13\x65\x11\xd5\x20\x86\x7c\x96\x83\xc2\x83\xb6\x28\x48\x50\x7e\xea\x19\xf3\xf8\x99\xb4\x47\x41\x7f\xd0\x6a\x5a\x2d\x65\x7f\x07\x00\x00\xff\xff\x5f\x41\xef\x3c\x57\x02\x00\x00")

func index_js_bytes() ([]byte, error) {
	return bindata_read(
		_index_js,
		"index.js",
	)
}

func index_js() (*asset, error) {
	bytes, err := index_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "index.js", size: 599, mode: os.FileMode(420), modTime: time.Unix(1414646096, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _layout_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\x4d\x73\xda\x3c\x10\xbe\xfb\x57\xec\x29\x36\x13\x06\xde\x70\x84\x97\xe9\x64\xd2\xe9\xa1\x97\x66\xd2\xde\x12\x0e\xb2\x59\xb0\x3a\x42\x72\x25\xe1\xe0\x10\xfe\x7b\x77\x85\xc1\x1f\xf9\x3c\x56\x33\x60\x6b\xb5\x1f\xcf\xee\xf3\xd8\x1e\x8f\xa3\xf1\x18\xae\xe1\xbb\x28\xc5\xcf\xcc\xca\xc2\x83\x92\xa9\x15\xb6\x82\x95\xb1\x30\xf9\x0a\x4a\x54\x66\xeb\xc9\x2b\x62\xcf\x3c\x13\x3e\xb9\x8f\x45\x3c\x8c\x53\xfa\x65\xf1\x62\x00\xf3\xf9\x1c\x62\x91\x66\x31\x3b\x94\x6f\x3a\x3c\xe8\xf4\x41\x07\x27\xf6\xfb\x65\xa0\xd8\x7a\x70\x85\xc8\x10\x52\xf4\x8f\x88\x1a\x50\xe1\x06\xb5\x77\x43\xd8\x3a\x04\x9f\x23\xac\x45\x91\xe8\x5b\xb9\x43\xe5\x06\xb0\xda\xea\xcc\x4b\xa3\x47\x51\x54\x0a\x0b\x4b\x2c\x1c\xcc\xe1\x3e\x02\x5a\xf1\xd2\x6c\x46\xbf\x5d\x3c\x3c\xee\x4c\xea\xd0\x96\x22\x55\xc8\xc6\x68\x31\x8b\xa2\x53\x34\x18\x7d\x87\x62\x59\x25\x14\x31\x84\xc6\x71\x00\xfb\x28\x04\x13\xba\x50\x76\x50\xef\x4e\x46\x5e\x37\x16\x85\x47\xc0\x4d\xe1\xab\x1a\xbc\x59\x41\xac\x63\x28\x02\x48\x78\x94\x4b\x04\xa1\x97\x6d\x9b\x17\x4a\x8d\x42\x96\x33\x86\x63\x01\xaa\x08\xf5\xb2\xe8\xb7\x56\x03\x77\x51\x4f\x21\xd9\x6b\xb1\xc1\x29\x75\x26\xcb\x78\x08\xce\x57\x8a\x76\x7b\x2a\xe0\xf3\x29\x68\xb8\x84\xb8\xd8\xd1\x41\x8e\x72\x9d\xfb\xc6\x72\x38\x0c\x66\x21\xed\xe1\xdc\xce\x8d\xd1\x44\x0b\xea\x00\xbd\x9e\x71\x17\x0f\xb3\x26\x68\xee\x3b\xfa\x15\xc6\xb5\x91\x9d\x7d\x1c\xfa\x5b\xe3\x24\xdf\xbb\x64\xd7\xf1\xe1\xc5\x94\x54\x81\x90\xc5\xac\x73\xc0\x42\x4a\xf8\x54\xd2\xe1\x7f\x33\xba\xfc\x4f\x75\x46\x0a\xf5\xda\xe7\xbc\xbd\x9c\xc3\x55\x3f\x1b\xaf\xca\xdd\xcb\x05\xc5\xb4\x0a\x53\x5d\xb2\x1d\x31\x76\xab\x1c\x3a\xbb\x7a\x9c\x95\x6b\x9c\x1a\x07\xc6\xf2\xd4\x3a\x91\x2b\xa0\xbc\x20\xb5\xf3\x42\x67\x48\x84\xb6\xe4\xf3\xa3\x23\x90\x76\x8d\x27\x6e\x96\x1a\xd9\x10\x97\xed\xd9\xb4\x80\x1d\x68\xdc\xa4\xe4\x57\xe2\xfa\xc3\x7c\x0d\xe7\x87\x9a\xc8\x8c\xf6\xcc\xe5\x94\x72\xf6\x58\x7f\x8d\xb5\x04\xaf\x5e\xb0\xcb\xb3\xc0\x09\x01\xe2\x2a\x99\x32\x1a\xc9\xab\x85\x06\x27\xa3\xa0\x3c\xf2\x38\xdf\x7e\x09\xce\x1b\xb9\x93\x94\xb2\x36\xd6\x89\xa7\x7c\x99\xf5\x3b\xc0\xc9\x67\x14\x09\xb9\xb1\xf2\x89\x5a\xa2\xc7\xa5\x8a\x4e\xe0\x72\x42\x4f\xc5\xf7\x99\x73\xdf\x94\x11\x24\xf4\x58\xe1\xca\x73\xf7\x0a\x85\xa5\xad\x26\xd0\xf1\x61\xd6\x6d\x3b\x6f\x14\xdd\x6e\x97\xa9\x16\x0e\x2e\x2e\xc2\xa5\xc5\xf8\xb5\xb5\xa2\x82\xe7\x67\x10\x9f\x10\x42\x5f\x09\x3b\x46\x28\x5c\x57\x90\x22\xc0\x3e\xbc\x43\x6c\xfb\xa1\xe3\x36\xcf\x0c\xf2\xff\xbb\x93\x2a\xd1\x7a\x99\x75\xe6\x54\x7e\x38\xa7\xd4\xf8\xfc\x34\xa7\x53\xc4\x1d\xbf\x3b\x7a\x61\x96\x6d\x6f\xc4\x9d\xe7\x5b\xfe\xcb\xf3\xe5\xee\x0a\x73\x0c\x1a\x09\x25\xd7\xfa\xf8\x0d\x3a\x76\x46\xfa\x6d\x5a\x9f\x86\xfb\x17\x8a\xed\xbf\x0f\x5f\x30\xb3\xc4\x95\xa4\x67\xa5\xc1\xc9\x82\x9b\x86\xff\x61\x83\x23\xd8\xca\x8e\x8d\xde\xfc\x53\xfe\x3b\x26\xa4\xc4\xf4\x50\x58\xfc\xb3\x95\x16\x13\xfe\xa2\x0d\x4f\xdf\x27\x3a\x8a\xfe\x06\x00\x00\xff\xff\xd2\x26\xe3\x8d\x9f\x07\x00\x00")

func layout_js_bytes() ([]byte, error) {
	return bindata_read(
		_layout_js,
		"layout.js",
	)
}

func layout_js() (*asset, error) {
	bytes, err := layout_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "layout.js", size: 1951, mode: os.FileMode(420), modTime: time.Unix(1429220721, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _module_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\x4d\x8f\x9b\x30\x10\xbd\xf3\x2b\xe6\x06\xa8\x2b\xb2\x49\x6f\x9b\xa6\x97\xed\xf6\x50\xf5\x4b\x6a\x6e\x51\x0f\x14\x0f\x8b\x1b\xc0\x96\x6d\xd2\x44\x55\xfe\x7b\xc7\x31\x10\x20\x84\xac\x2a\x2d\x52\x14\xc5\xf3\xe6\xbd\x37\x1f\x26\xb3\x99\x37\x9b\xc1\xd3\x5e\xa2\xe2\x05\x96\xe6\x01\x62\x28\x04\xab\x72\x84\x44\x94\xda\xa8\x2a\x31\x42\x41\x4a\x1f\x77\xac\x23\x80\x75\xc6\x35\x88\x5f\xbf\x31\x31\xc0\x0b\x99\xa3\xcd\xd4\x60\x32\x84\xb5\xf8\x20\x0a\x28\xd0\x64\x82\x45\x44\xed\x79\x69\x55\x26\x86\x8b\xb2\xce\x0f\xc4\x3c\x84\xbf\x1e\xd0\xb3\x8b\x15\x88\x05\xac\xea\x9f\xf6\xe9\x68\x3e\xd4\x09\x77\x6d\x50\x61\xc9\x90\xce\x5b\xc6\xa0\xc0\xb0\x93\xdc\x70\xda\xb8\x26\xda\xcd\xcf\xe5\x45\xec\x24\x10\x5b\xb7\x97\x71\x5b\x64\x60\x41\x5b\xe0\x64\xf7\x82\xdb\x3e\x3c\xb5\xaa\x51\x16\xeb\x6f\x7f\xca\xef\x4a\x50\xdf\xcc\x21\xd8\x86\x63\xd8\x46\xd3\x1c\x48\xcc\x1c\x24\x8a\x94\x58\x37\xdb\x81\x6c\x97\xda\x42\x57\x2b\xf0\x9b\x12\xfd\x6b\xbc\x27\xbf\xb6\xce\x48\x56\x3a\x23\x03\xe3\x9c\x47\xc0\x5c\xe3\x04\x47\xdb\x8f\x1b\x3c\x17\xa7\xfd\x13\xf7\xeb\xa2\xdb\x8c\xef\xa8\x74\x26\x92\xca\x6e\x48\x94\x28\x8c\x0d\x3e\xb9\x7d\x09\x7c\x8a\xfa\x03\x3d\x3a\x8a\xb4\x39\xe4\x18\x15\xb1\x7a\xe6\xe5\x67\x4c\x0d\x31\xf8\xf3\x7b\xb9\xf7\x97\xe3\x22\x19\x53\x13\x22\xd9\x62\xa8\x41\xf8\x28\x96\x92\x96\xe9\x31\xe3\x39\x0b\x06\x99\x6b\xdc\x9b\xaf\x82\x61\xe0\x7f\x8a\x77\xf1\x8f\x44\x71\x69\xe0\xcb\x69\x15\xfd\x70\xc4\x6e\x97\x8a\xa8\xc3\x11\x97\x76\xb2\x6e\x58\x39\x96\xcf\x26\x83\xf7\x70\x3f\x36\x58\x87\xd1\x42\x99\x60\x64\x0e\x31\x63\x1f\xeb\xb5\xd0\x01\x29\xdf\x39\xfc\x00\x39\x32\x09\x2b\x7f\x9e\xf3\xb4\x85\x33\x6e\xc2\xc6\x63\x03\x72\x36\xda\x9c\xdb\x56\x14\x9a\x4a\x95\xb6\x6f\x67\xa8\x83\x1d\x97\xde\xe9\xbb\x7f\x09\xcf\x2f\x8b\xa6\x10\x31\xbf\x7d\xf9\xc4\x82\x2e\x19\xed\x84\x98\xf7\x2e\x5b\x2d\xe4\x74\x6a\x27\x62\xb1\xf4\x8e\x9d\x97\xd4\xb5\x26\x77\x5e\x59\x37\xf6\xed\x6d\xb3\x6f\x2f\xde\xb3\x56\xb0\xdd\xaf\xf1\xbd\xea\xf7\x87\x93\x89\xfb\x25\x7d\xbd\x83\xee\x6e\xd9\x93\x37\x2b\xe8\xf5\xcd\xc2\xf7\x04\x3f\xe1\x36\xbc\xd3\x12\x1b\x91\x13\xd5\xc8\xee\xe5\x91\x3d\x4f\xc3\x9c\xb6\x9e\x7d\x08\x9d\xa4\x61\x29\xb2\x8e\x1d\x87\x6d\xbf\xba\x54\xaf\xd9\xfa\x56\xf4\x7f\x5b\x3f\xbc\x57\xd7\xda\xbf\xa5\x94\x16\xfb\xea\x23\xd8\xbe\x7c\x04\x0c\x53\x5e\x62\xe0\xdc\xba\x7f\xdc\xe6\x9f\xd7\x3b\xda\xca\xff\x05\x00\x00\xff\xff\x67\xf0\x5e\x07\x22\x08\x00\x00")

func module_js_bytes() ([]byte, error) {
	return bindata_read(
		_module_js,
		"module.js",
	)
}

func module_js() (*asset, error) {
	bytes, err := module_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "module.js", size: 2082, mode: os.FileMode(420), modTime: time.Unix(1414646096, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _observable_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\xcd\x6e\xe3\x36\x10\xbe\xeb\x29\xb8\x97\x8d\x8c\x35\x94\x22\x47\xbb\x46\x11\xa0\x05\x8a\x1e\xba\x0b\x2c\xd0\x4b\x90\x03\x2d\x51\x16\x6b\x99\x54\x49\xca\xa9\xb1\xf0\xbb\x77\x66\xf4\x43\x9a\xa2\xb3\x8b\xfa\x90\xd8\xe4\xfc\xcf\x37\xdf\xf0\xf1\x31\x7b\x7c\x64\x9f\xf7\x56\x98\x33\xdf\xb7\x82\xfd\xf1\x15\x0e\x32\x3c\xfc\xd2\xef\x5b\x69\x1b\x61\x2c\xe3\xaa\x62\x5f\xfb\xbd\x2d\x8d\xdc\xe3\x6f\xdb\x70\x23\x98\x6b\x44\xa0\x89\x2a\x52\x39\x61\x6a\x5e\x8a\x35\x7b\x6b\x64\xd9\xc0\x41\xd9\xf6\x95\x00\x0b\xec\x20\x5c\xbe\x22\x4b\x76\xb2\x94\xaf\x50\xa9\xee\x55\xe9\xa4\x56\x45\x36\x7d\x0b\xac\x82\xca\xb7\xec\x9a\x65\xfe\xa4\xe8\x8c\x76\xda\x5d\x3a\x51\xcc\x86\xd8\x6e\xb6\x92\xd7\xa8\xc1\xe0\x23\x6b\x96\x7f\x70\x8d\xb4\x5e\xce\xd8\xe9\x12\x3f\xf1\x1d\x58\x79\xa9\x5f\xb7\x74\x7f\x65\xa2\xb5\xe2\x1d\xe1\xa2\xeb\x6d\x03\xce\x46\x71\xfa\x6b\x84\xeb\x8d\x22\xd1\x6d\x76\xdd\x52\x15\x75\x71\xe2\x1d\x06\x25\xb1\x08\xb6\xd1\xc6\x35\x58\x84\x5a\x1b\xa6\x7d\x52\xde\x72\xfe\xa2\x5f\xd7\xac\x5e\xa5\x53\x06\x63\xc9\x64\x47\xd7\xa1\x19\x0c\x83\x2c\xcd\xb1\x04\x6d\x3e\xf3\xb6\x17\x36\x9b\x7b\xec\x5d\x80\x79\x25\xde\x6e\x5a\xb0\x4d\xc9\x15\xa5\x56\xd6\x99\xbe\x74\x90\xc9\xce\xa3\x05\x5c\xcd\x7d\x9c\x0f\xf3\xf3\x14\x28\xd5\x91\xbc\x83\xd2\x79\x8b\xbd\x4d\x19\xb7\xc2\x85\x79\xde\x55\x9f\x1a\xfd\x5e\x9f\xcf\xdc\xb0\x13\xca\x0f\x8d\xb9\xdb\x51\x68\xc9\x6f\xbc\x84\xa6\x2e\xaa\x3b\x7d\xea\xfc\x24\x56\xde\xc2\xf5\xfd\xee\xa7\xf2\x3a\xdc\xe6\x15\xb5\xcf\x67\x37\x58\x88\x9a\x56\xea\x53\xd7\x3b\x8e\x9a\xb6\x60\x61\xb3\x57\xcc\xf1\x23\x8d\x19\x78\x74\x4c\xd7\x01\xb6\x2c\x5a\x41\xc8\x71\x56\xf2\xb6\xdd\xf3\xf2\x38\x07\x40\xe7\x83\x73\x9c\xf2\x10\x91\x8c\x3d\xab\x0b\x73\xf2\x44\x93\xcd\x07\xc4\x20\x8a\x8d\xf8\x07\xa0\xe3\x44\xc5\x9e\xff\xfc\x15\x95\xa4\x82\xa8\x58\xc3\x2d\x2b\x01\xda\x07\x51\xad\x89\x1a\x0e\xf2\x2c\xd4\xec\x92\xe8\xc1\x32\xf1\xaf\x28\x7b\x87\x22\xe8\x59\x3a\x3b\xa5\x1e\x98\xc7\xdf\xa2\x2a\x32\xcf\x38\xdf\x41\x67\x4a\x30\x82\xa7\x17\xd9\x7a\x78\xfa\xc3\x9c\x9b\x83\xc5\x59\x89\x60\x26\x2b\xec\x16\x07\x2a\xd8\xfa\xf3\x1a\xcf\x82\xdf\xa8\x0b\x47\xf8\x0f\x7a\xb6\x44\x1c\x63\x90\xfb\xf3\x59\x83\xb1\x07\x3c\x78\x60\xfc\xb4\x97\x87\x5e\xba\x4b\x41\xe2\xa8\xb9\x44\x9f\x0e\xd1\x87\x18\xd7\x50\x69\xeb\xb8\x2a\x05\xf4\xd7\x57\x20\x06\xa9\xf6\xa0\x9e\x8d\x81\xf2\xde\xc6\x82\xf8\x39\x89\x42\x2a\x4a\x94\x3b\xaa\x65\x78\x79\x0d\xb1\x9e\x4d\x27\x30\xb1\xc9\x82\xf3\xaa\x7a\x36\x87\x10\xdd\xfa\xa6\x9c\x94\x25\xb1\xa6\x1e\xed\x26\x06\xf3\x87\x82\x4f\x06\x7d\x1d\x79\x2e\x19\x9b\x17\x4f\x4d\xdf\x4c\x20\x24\xb4\x58\x11\x09\x1c\xfc\x08\xed\x10\x61\x00\xf8\x72\x4c\x53\x82\xfe\x4f\x5b\xf8\xf7\xf3\x92\x77\x5a\xa1\x0e\xae\x81\xcb\x4f\x9f\x52\x2d\x42\xf5\x7a\x2c\x52\xa8\xf7\x22\x5f\xb7\x0b\xe1\x9a\x42\x8a\xfb\x18\x77\xf1\x7e\xa1\xd2\xfc\x74\xa7\x40\x09\xd6\x62\xf1\xea\xc4\xe8\xe1\xce\x4e\x09\x10\x0a\x68\x25\x7a\x94\x04\x39\x8f\x26\xef\x40\x9d\xfd\x02\x00\x19\x1e\x12\x1b\xa6\xc7\x24\xb1\xf1\xde\x97\x6e\xab\xbf\xc6\xf5\x10\xc5\x15\x2d\x8f\x61\x94\x0b\xde\x75\xed\x25\x57\x7d\xdb\xae\x29\xce\x55\x24\x4b\x9d\x07\x1e\x11\x93\x93\xb0\x16\x60\xe8\xc3\x6e\xe7\x7d\x7e\xfc\xb8\xe8\xd2\x4d\x47\xef\x6c\xa2\xff\xb3\x8a\xe2\x5d\xe4\x87\xf5\x9a\xbd\xdb\x1d\xea\xfd\x3c\x5a\xf6\x2e\x05\x8e\xea\xc8\xb6\x09\x9e\x24\x1a\x00\x5a\xfb\x1d\x68\xfc\xe2\xd7\x89\xd3\xb0\x80\x6a\x07\xeb\xc2\xf0\x37\x7f\x0c\xef\x42\x4d\x3b\xc1\xef\x17\xb0\xcf\xdb\x93\x0f\x04\xd5\x16\xcf\x99\xc5\xa4\x8e\x35\x1c\x19\xf7\xd9\x18\x7e\x09\x1f\x0d\xad\x2c\x81\xf8\x61\xe3\x60\x9c\xfd\x49\x28\x17\x8c\xc2\xf2\x89\xe4\x93\xa1\xba\x51\x4e\xe9\xa4\x4a\xde\x81\xf2\xf0\xe4\x2d\x7b\x63\xc0\x32\x03\x7c\x02\x9d\x00\x3e\x69\x6f\xfe\x2d\x4a\x07\x0b\x5a\x39\x2e\x95\x54\x87\x9b\xfd\xeb\xab\xad\x78\x07\x4f\x40\xe7\x99\x91\xd0\x04\xb1\xe3\xc6\x66\x3b\xc0\xd2\xc3\x60\xea\x61\x41\xfe\x34\x9a\x00\xb0\x80\x21\x63\x4c\x4c\x19\x4e\x5e\xe6\x61\x09\x79\x3c\x7e\xd8\x7a\x07\x37\x1b\x73\x37\x96\x37\xc5\x48\xd3\x90\xd2\x1c\x4f\xde\x62\xce\x49\xf9\x99\xfa\xa7\x9f\xa0\x7b\xdf\xae\x4b\xfa\xc2\xcb\x63\x82\xd5\x90\x46\x8f\x00\x23\xa6\x53\xf1\xf8\x14\xe0\x11\xf2\xf9\x4d\x7d\x31\xba\x13\xc6\x5d\xf2\xe3\xea\x9e\x38\x7e\xf4\xd3\xcb\xf1\x15\x02\xf1\x5d\x81\xdf\xab\xa5\x77\x4a\x67\x71\xba\x3c\x99\xca\xf2\xf4\x1d\xf6\x8d\x2b\x33\xe9\x4d\x8f\xc9\x6b\x30\x9f\xdd\xf2\x05\x1d\x0c\x66\xf8\xbe\x26\xf4\x56\xa2\x96\x4a\xe4\x83\xa0\xe7\xcd\x4d\xf0\x7d\x4d\x77\xb3\xe6\xc6\x7f\x1d\x6e\x3a\x7f\xd3\xdd\xde\x78\x1a\xd8\x04\xdf\x87\x3b\x1b\xdc\xd9\xe8\x0e\x47\x7b\x43\x7f\x47\xd9\xb1\xde\x9b\xf9\xdb\x7a\xa0\x2c\x18\xbd\x4a\x74\x46\x94\x1c\x5f\x97\xc0\xbd\xdc\xc2\xf4\x50\xab\x28\x7c\xb1\x08\xc9\x35\xbd\x3a\x86\x1e\x33\xda\x06\xff\x05\x00\x00\xff\xff\xb8\x49\x5a\x12\xd6\x0e\x00\x00")

func observable_js_bytes() ([]byte, error) {
	return bindata_read(
		_observable_js,
		"observable.js",
	)
}

func observable_js() (*asset, error) {
	bytes, err := observable_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "observable.js", size: 3798, mode: os.FileMode(420), modTime: time.Unix(1429335414, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assert.js": assert_js,
	"dom.js": dom_js,
	"index.js": index_js,
	"layout.js": layout_js,
	"module.js": module_js,
	"observable.js": observable_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"assert.js": &_bintree_t{assert_js, map[string]*_bintree_t{
	}},
	"dom.js": &_bintree_t{dom_js, map[string]*_bintree_t{
	}},
	"index.js": &_bintree_t{index_js, map[string]*_bintree_t{
	}},
	"layout.js": &_bintree_t{layout_js, map[string]*_bintree_t{
	}},
	"module.js": &_bintree_t{module_js, map[string]*_bintree_t{
	}},
	"observable.js": &_bintree_t{observable_js, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

