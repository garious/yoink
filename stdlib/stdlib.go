package stdlib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _assert_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x52\x4d\x6f\x9c\x30\x10\xbd\xfb\x57\xbc\xee\x21\x18\xa5\x4a\xee\xbb\xda\x43\x2b\xe5\x9c\x1e\x7a\x2b\x3d\xb8\x30\x10\x97\xdd\x31\x6b\x9b\xd2\x55\xc5\x7f\xaf\xcd\x57\xd0\x96\x48\x95\x62\x09\x69\xc6\x8f\x99\xf7\xe6\x79\x1e\x1f\xf1\xf5\xc5\x9a\x0e\x8a\x41\xbf\x73\x6a\xbc\x36\x1c\x92\x02\x64\xad\xb1\x38\x93\x73\xaa\x22\xe8\x12\xbe\x33\x50\xb6\x6a\xcf\xc4\xde\x85\x88\xc0\xc6\x83\x2e\xad\x3a\x89\xb2\xe5\x7c\xa8\xa4\x8b\x54\xb9\x0f\x57\x1f\x43\xbb\x86\x72\x4f\x45\x8a\x3f\x02\x88\x1d\x26\x08\xc7\xe3\xf1\x16\x8d\xc7\x92\x6f\x2d\x1f\x62\xda\x83\x4e\x6e\x60\x95\xfe\xda\x90\x29\xb1\x2a\x4d\xcc\x8f\x9f\xa1\x36\x59\x95\xfe\x52\x16\xf5\x61\xce\xca\x20\x5c\xd6\xd0\xbc\xc5\x82\x49\xcb\x0c\x3d\xbc\x28\xf7\xdc\xf1\x17\x6b\x1a\xb2\xfe\x2a\xeb\x14\x77\x77\xa8\xf1\x21\x32\xe5\x86\x9d\xb7\x6d\xee\x8d\x4d\x6e\x7a\x0c\x67\x19\xf7\x5b\xfd\xfd\x75\xe2\x90\xa4\x87\xf5\xbf\xbd\xb8\x0d\x5e\x25\x8e\xf5\x1b\x02\x47\xe0\x5d\xf2\xd6\x73\x06\x51\x83\x7b\x2d\x17\x54\x6a\xa6\x22\xf6\x59\xc4\x0f\xfd\x16\x68\xab\xd7\x6c\xb3\xf3\x2a\xaf\x71\x04\x53\x87\xa7\xb8\x23\x32\x7d\x18\xee\x0e\x9b\x25\x3e\x6e\x97\xdc\x7d\x72\x2e\xc8\x8f\x1b\x52\x2a\x7d\x0a\xae\x67\xfc\x3c\xbc\x22\xb4\xc3\x59\x3b\xa7\xb9\x42\x4d\xd7\x3d\x76\xb8\x0f\xe3\xdd\x23\xc9\x38\xe3\x24\x04\x72\xc5\x34\x51\xa5\xff\x72\xf5\x6f\xfb\x3d\x2d\xd3\x32\xd2\xdb\x92\x9e\x26\xaf\xf6\x19\x47\x19\xb3\x75\x21\xdc\x65\xfc\xb9\xf5\xa8\x8c\x9f\xb0\x69\x1f\xff\x47\x67\x2f\x7a\x21\x46\x67\xe5\x28\x82\x2e\xfb\xf0\x89\x3e\xe0\xe2\x6f\x00\x00\x00\xff\xff\x1c\xe6\x04\x4f\x82\x03\x00\x00")

func assert_js_bytes() ([]byte, error) {
	return bindata_read(
		_assert_js,
		"assert.js",
	)
}

func assert_js() (*asset, error) {
	bytes, err := assert_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assert.js", size: 898, mode: os.FileMode(420), modTime: time.Unix(1418359115, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dom_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x59\xdd\x6e\xdb\x38\x16\xbe\xf7\x53\x70\x6f\x46\x0e\xc6\x55\x9b\xf4\x2e\xde\xec\xa0\xdb\x0e\x30\x33\x98\x6e\x76\x67\x0a\x0c\x76\x8b\x00\x43\x4b\xc7\x31\x1b\x59\xf4\x92\x94\x63\x21\xf0\xbb\xef\x39\xa4\x48\x91\x92\x9c\xb8\x5b\x5d\x34\x96\x48\x7e\x3c\x3f\xdf\xf9\x21\xfb\xfa\xf5\xec\xf5\x6b\xf6\x51\x96\x4d\x05\xac\xe6\x5b\xb8\x9e\xb9\x4f\xf4\x94\x72\xdb\xbd\x7d\x00\x5d\x28\xb1\x33\x42\xd6\xf1\x84\x0c\x67\x64\x4c\x68\xc6\xd9\x2f\x7c\xcf\x7f\xb7\x73\xd8\xd6\xa1\xad\xa5\x62\x85\x02\x6e\x44\x7d\xcf\x7e\xfa\xf4\xf1\x57\x06\x15\x6c\xa1\x36\x3a\xf7\xeb\x3f\x6d\xc0\xcf\x86\xc3\x4e\x6a\xd0\xcc\x3c\x4a\x26\x57\x5f\xa0\x30\xac\x90\xb5\x36\xaa\x29\x8c\x54\x7a\xc1\x32\x8b\x05\x3f\x3a\x8c\x8c\xf1\xba\x64\x59\x87\x98\x25\x88\xeb\xa6\x2e\x48\x52\x14\xab\x28\x00\x05\x32\xf8\x51\xa3\x6e\x8c\xab\xfb\xc6\x4a\xb0\xc0\xe5\x4e\x26\xc3\xef\xad\xde\xf6\x0b\x37\x46\x89\x55\x63\x40\x7b\x3c\x27\x8a\x1b\x54\x8a\xb7\x4c\xae\x99\x6e\x56\x5e\x93\x85\x15\x03\x07\x61\x8f\xaf\x3f\xe1\x4b\x05\x4a\x77\xab\x72\x2b\x4e\x30\xa6\x58\xaf\x41\x41\x5d\x00\x19\xcc\x6c\xb8\xe9\xc5\x67\xa8\xbb\xd9\xc9\x9a\xf4\x47\x59\x9d\xd5\x64\x4d\x9b\x21\x76\x53\x97\xa0\xaa\x96\xcc\xf8\xe1\xf6\xa3\xc7\xeb\xd6\x2e\xd8\xe3\x06\x61\xb9\x1e\x19\xc8\xbd\x6a\x2b\xa1\x02\xd3\xa8\xda\xa1\x23\x86\x5f\x9c\x47\xbe\x4c\x56\xcf\x0f\x17\xec\xe6\xe6\xc6\xcf\xc3\xd7\x1c\x45\x47\x31\xe6\x17\xd1\x92\xbf\xb7\x5e\x70\x92\x6d\x28\x79\xb7\x17\x0a\x88\xdf\xad\x1a\x02\x5d\x01\xda\x13\x24\xd8\xd8\xda\xc2\x49\xe8\x37\xec\x2c\xa8\xd9\xa3\x30\x1b\xd9\xd0\xf0\x7f\x1b\xa1\x68\x1b\xce\x56\x4a\x3e\x6a\x50\x0c\xf9\x15\x5e\x3c\x96\x16\xdb\xa6\xe2\xc8\x18\xf4\x52\xb1\x61\x68\x96\x5f\xf4\x07\xb9\xa5\xb9\xff\x91\xdb\x95\x00\x74\xca\x3b\xb6\xe2\x0a\x5e\xad\xac\xbd\x23\xde\x8a\xda\x80\xda\xa1\x20\x11\x5c\x07\xf2\x0f\x59\x42\xfe\x85\xc4\xa9\x2a\xfc\xb8\x5e\x8b\x02\x62\xe3\xfd\xeb\x9a\xfd\x41\x5a\x88\x35\xdb\xb6\x8c\xef\x76\x95\x28\x9c\x21\xca\x16\xd9\x85\x2f\x55\xd5\xb2\x66\x57\x5a\x8f\x48\x34\x8d\x0a\xaa\xf6\xa4\xfb\x21\x42\x7c\x77\xcd\x7e\x46\xfa\x03\x2f\x2d\xe5\xc0\x18\x6f\xe3\x30\x1f\x29\xa5\xd0\x48\x55\xbb\xa0\xe8\x51\xa0\x9d\x7f\x4b\xd8\x91\xab\xea\xa2\xb5\xd6\xf3\x80\xf8\xa0\x13\x6e\x57\x68\xac\x3d\x5f\x61\xc4\xed\xb9\x12\xf4\x03\x2d\xf2\x6f\xd9\x28\x47\x61\xb6\x71\x1c\x66\x1a\xcd\x5e\x95\xb4\xb1\x05\x95\x61\x5d\x84\xe7\x11\x2c\xc5\x5a\x8b\xd1\xe9\xd4\xad\x5e\x41\x1f\xc4\x50\xb2\x46\x7b\x1d\x7a\xb8\x34\x48\x5c\xd2\x61\x95\x58\x29\xae\x5a\x67\xee\x12\x1d\x52\x0c\xa5\x88\xac\x40\x9b\x3b\xcb\x7a\xca\x45\x68\xc1\xc8\x75\xcb\x8c\xc0\x14\x20\x90\x54\x7b\x5e\x35\x28\x19\xaa\x7a\x0f\xba\x73\x63\xe2\xc9\x16\xa5\x00\x5d\x67\x26\x04\xc0\x05\xe3\x8d\x91\x5b\xf4\xa9\x73\xa5\x8b\x96\x48\x20\x6d\xf3\x1d\xda\x10\xc5\xee\x16\xc5\x96\xf7\xd2\xe6\x03\x17\xaf\x9d\xdd\x62\xc6\x60\x76\xd8\x62\x54\xe1\x26\xda\xd0\x7e\x64\x42\x63\x23\x3d\x64\x53\xd2\x13\x0e\x46\xf1\x68\x0b\x1f\x31\x85\xb5\x7c\x09\x15\xb7\x00\xca\x34\x3b\xa7\x39\xd9\x89\xbc\x81\x19\x90\x6d\x61\x2b\x51\x50\x4b\xa7\x7e\xeb\xc4\x0b\x4e\xff\x1a\xa0\xb4\x32\xcf\x66\xe8\x6d\xe2\x96\x66\x37\xec\xf3\xcc\x66\xff\xc8\x8b\x5f\x74\x36\xbb\x5b\xce\x66\x3e\xf7\x32\x59\xff\x86\xdc\x6d\xe7\xfd\x9c\x0b\xf6\x34\xb3\xeb\x70\x97\x77\x25\x52\xcb\xb4\xe8\xc7\x4c\x67\x96\xa6\x9d\x53\x32\xfb\xf5\xb3\xbe\xcb\x98\x91\xc3\x74\x85\x09\x13\x33\x3d\x41\x84\x6d\x78\x59\xfe\x4e\x2b\xe6\x98\xc0\x23\x67\x2c\x1c\x3a\xfe\xa1\x5d\xbd\x52\x18\x9d\x73\x8f\x8f\xd1\x8e\xd6\xc1\x6c\x8c\xd1\x15\xe9\x71\x9b\x88\xcb\xa2\x07\xf2\xb0\xf4\x86\xf9\x9f\xf9\x3d\x20\x37\x96\xc9\x44\xb2\x93\x8c\xe7\x6c\xf9\x6e\xee\x05\x9e\xef\x11\x37\x81\xda\x2f\x8f\x03\x80\x48\x8f\x7c\xd7\xe8\xcd\x5c\x46\x13\x8e\x68\x0c\x0d\xe7\xc8\x16\xad\x99\xb9\x7f\x63\xeb\xf7\xf1\x93\x3d\xa4\x1e\xd8\x9f\x34\x3d\xae\xfe\xd9\xe6\x75\x0f\x14\x40\x32\x1f\x54\x48\xde\x8c\xea\xd5\x5a\xd4\x50\x66\x0b\x0c\x37\x17\xc4\x98\x09\xc4\x7d\x2d\x15\xb2\xe9\x2c\x10\x4c\x55\xbd\x19\x16\x34\xbd\x9e\x8a\x61\xa1\x3d\x4a\xb2\x6b\x9a\x26\xbd\x00\x0a\x49\xbf\x27\x3a\x0f\x19\xf4\xce\x4f\x1d\xb1\xe8\x61\xc1\xf6\x43\x06\xed\xbf\x9a\x3a\xc4\x08\x94\x97\x9c\x3d\x45\x18\x0b\x8a\xc3\x7f\xc1\x82\x1b\xb4\x18\x62\x74\x6e\x06\xd3\x0b\x4b\xc2\xf1\x6a\x00\x76\x9c\xe4\xe2\x7e\x4c\xc2\x11\xba\xd3\xed\x45\x21\x4e\x08\x32\x10\xc3\x8a\x32\x45\xd5\x1e\xc2\xb9\x23\x42\x99\x82\x48\x75\xfb\xe6\x40\x39\x53\xc7\x97\xf5\x3b\x4e\x07\x57\x60\x15\xae\x7f\xbf\x11\x55\x89\x5d\xd3\x3c\x61\x14\x32\xec\x90\x24\x25\xc8\x45\x5d\x83\xb2\xcd\xe8\x0d\xcb\xb2\x7e\x1f\x2a\x28\x73\xf2\xa0\xc0\x81\x37\x4b\xfc\xf3\x57\x5c\x9b\x57\x50\xdf\x9b\x0d\xbe\x7e\xff\xfd\x14\xd1\x0e\x38\xf9\xa0\x3f\x8b\xbb\x54\x60\xfa\x6c\xda\x1d\x71\xf6\x60\x5b\x3b\xcc\xb4\xd4\x4f\x65\xec\x07\x4c\xf6\x85\x6d\x8b\x73\x57\xd5\x3e\x61\x69\xa1\x86\x87\x9a\xc0\x6b\x76\x18\x93\xd5\xe3\x74\x3d\xa1\x83\xf3\xaa\x67\x53\x06\xb5\x42\x85\x16\x72\xec\xe7\x04\x15\x43\xe4\x0c\x48\xbf\x2c\x26\x81\x40\xfc\xc3\xed\xda\x77\xaf\xaf\x2e\x4f\x2d\xa4\x67\xc4\x9e\xc3\x84\x60\xf4\x1c\x27\xbf\x3a\x95\x26\xc2\x79\xbc\xe4\x38\x48\xd6\x58\x72\xd1\x12\x96\x1f\xc9\xa6\x81\x4a\x3e\xa9\xbd\x77\x5d\x06\x4f\x32\xb1\xcd\xd5\xfe\xd8\xc2\xb2\x7a\x8b\x09\xaf\xef\x21\xfd\xe1\x29\xe3\x3a\xeb\xaa\x60\xf8\x84\x6f\xd9\x22\xa4\xdd\xe9\x13\x0d\xcb\x0e\xb4\xb0\x3b\xd6\x74\x2b\x71\x4a\xd2\x1d\xe2\x2c\xd0\xc3\x52\x9c\x1e\x20\x76\x3a\xd4\x7b\x7a\x6c\x22\x8a\x9a\x25\xec\x21\xa8\x5d\x88\x1d\xd9\xf9\x9f\x1a\x8c\x88\x9e\x43\x0f\xda\xfe\xe3\xc9\x9e\x54\xf1\xf7\x31\x36\x5e\xf8\xd9\x5b\x8e\xec\x56\x23\x95\x13\x39\x00\x11\x06\x94\xef\xa5\xce\x09\xfa\x62\x99\x80\x25\xf5\x52\x27\x58\x9c\xc4\xc1\x55\xfd\xf0\x32\x19\x7f\x58\x26\x3a\x72\x3d\xd4\xc7\x06\xf9\x03\x96\x14\x36\x1e\xeb\x57\xe5\x1b\xae\x6f\x1f\xeb\x7f\x2a\xb9\x03\x65\x5a\xcc\x95\xec\xbb\xef\xd8\x83\xcd\x64\xae\x65\xca\xe8\x03\xd7\x9f\x1f\xee\xce\x4b\xe1\x2f\x95\x3d\x0b\xf5\x15\xcc\x3e\x8e\x2c\x66\xfb\xb2\xc4\x18\x8e\x8d\xd6\x5e\xf6\xe7\x72\xdc\x99\x4d\x9a\xc7\xae\x25\x13\x4d\x4e\x49\xd6\x0f\x0d\xa5\xad\xa1\x42\x77\x74\xae\x69\x5e\xe8\x29\xbf\xc5\x2c\x05\x85\x7d\xb8\x0a\x49\xec\x73\xe8\xc8\xd4\x35\xfc\x3a\xb5\xcf\x61\xc4\x8f\x38\x6b\x3e\x1f\x35\xf4\xa4\x79\xe7\x64\xce\xd7\x17\xc3\x52\x77\xaa\x8c\x3b\xa1\xbe\xba\x1b\x4a\x35\xc6\x79\xb6\x60\x4d\xa7\xde\x83\x1b\xc4\x49\xa7\x32\xad\x47\x92\x61\x62\xd2\xe9\xa0\x3a\xa7\x2b\xc0\x0b\x45\xfa\x44\x35\x38\xf1\xfd\xd9\x66\x24\x2c\x1e\x7d\xf9\x2a\x19\x9e\xe3\x55\x9a\xa0\xd3\x84\xd7\xf1\xca\x0f\x2e\xa7\xf2\x2e\x74\x0c\x72\x29\x7f\xc4\xa0\x3e\x4f\xc1\xc9\x3c\x05\x13\x79\xea\x74\x0b\x89\x61\xf6\x23\xc9\xfc\xab\xd0\xc8\x76\xec\x0b\x30\xeb\xc0\xff\x9f\x75\x86\xbd\x80\x6b\x93\xd8\xdf\xd8\x9b\xa1\x08\xdd\x55\x53\x44\x56\xac\x7f\x74\xbf\xb9\x42\x21\x12\x1f\x04\x1a\x5d\x3c\xf9\xfb\xa9\xe4\xb4\x16\x6d\x1f\xc6\x07\x67\xad\xdf\xdc\x77\xce\x8a\x4a\xd6\xe0\xef\xc5\x44\xbd\x6b\xfc\x25\x57\x77\x2d\xb2\x53\xd2\x48\xf2\x05\x0e\x6e\x40\x09\x1b\x53\x83\x12\xfb\x9e\x30\xe6\xa8\xcf\x71\x50\x7a\xed\x77\x19\x2b\x6a\xa7\xe6\x3d\xe8\x0d\x93\xcb\xa1\xb0\x35\x3c\x7a\xc8\x13\x62\x93\xac\x4d\xdd\x5d\xe8\x65\xf2\xb2\xbb\x76\x95\x57\x74\x18\xfc\x83\x0e\x65\x2b\x89\x46\xa6\x84\xc5\x45\x1d\x9f\xea\xec\x7d\xeb\x03\xb4\xee\x30\xd6\x9d\xd6\x6a\xbb\x14\x9b\x97\x07\x64\xdb\x4e\x41\x01\x74\x4f\x35\xd4\x72\x2b\x0e\x02\x83\xe1\x12\xb3\xef\x55\xac\x92\x0d\xf3\xb7\x54\xfe\x8f\x27\x8b\x6c\x4f\x53\x39\x6a\xfe\x2c\x43\x2e\xcf\xa3\xa8\x7c\x4b\x95\x14\x8d\x76\x89\x7f\x9f\x6f\xfd\x07\xdb\x5e\x4d\x6e\x7b\x35\x5d\xc1\xe5\xd5\x59\x05\x3b\x48\x73\x75\x96\x34\x9e\xe0\x6f\x87\x5e\xad\x60\x6d\x5e\xad\x65\x55\x26\x8d\x61\x38\x43\x17\x5c\x17\xbc\x04\x5b\xfc\xb4\xad\x37\x94\x11\x9e\x8e\xec\x4f\xeb\x92\x3f\xe9\x5c\xf1\xe6\x2e\x7e\xbb\xec\xdf\xf2\x3c\x8f\x47\x5e\x5d\xde\x0d\x38\x3a\x02\x7f\x1a\x0a\x8c\x87\x1b\x05\x65\x53\xc0\xdc\xe2\x2c\x70\xeb\x21\x31\xbd\xa8\xfe\x5e\xee\xa9\xbb\xbb\x0f\xed\x57\xa8\xd2\xbe\x88\x2e\x42\x4e\x3c\x5e\xc4\x20\x41\x30\xdf\xfb\xf1\xb4\x63\x8d\x52\x23\x7f\xbe\xb8\xf2\xa8\x25\xe5\x27\x5a\x52\xb3\x11\xae\xb5\xc4\xa9\xdc\xfd\x1a\xb4\xbf\x3c\x6e\x22\x47\x94\x70\x00\xd1\x04\x0b\x13\x75\x9d\x91\xfb\x3b\x34\xe7\x62\xfb\x4c\xa3\x45\x13\x2c\x9a\xeb\xc9\xc6\x40\xde\x92\x27\x81\xa2\x09\x16\x28\xf4\x2f\x63\xac\x70\x80\x38\x85\x15\x4d\xb0\x58\xa1\x66\xa5\x07\xed\xce\x69\x7d\x82\x0b\x67\xd1\x28\x69\xc7\x7e\xea\x28\x96\xb6\xfb\xb4\xa3\x67\xd8\x72\x70\x82\x87\x84\x16\x03\x18\xca\x9c\x11\x6f\x12\x92\x3a\x8d\xe6\xfd\x9a\x64\xcf\xeb\xf4\x75\xd1\xcf\xa2\x44\x7c\xcd\x92\xd7\x7e\xd4\x06\x44\x3f\xea\xe2\xa3\x5f\x1b\xc7\xd6\x75\xfa\xda\xcf\x0a\x12\x24\xaf\xfd\x38\xa4\xe3\xfe\x16\xdb\xaa\x86\x2a\xa2\x7a\xee\x7f\x61\x60\x4e\xd7\xc0\x0b\x7f\xc5\x4b\x87\xa5\xd9\xff\x02\x00\x00\xff\xff\x39\xb2\x4a\xea\x48\x1c\x00\x00")

func dom_js_bytes() ([]byte, error) {
	return bindata_read(
		_dom_js,
		"dom.js",
	)
}

func dom_js() (*asset, error) {
	bytes, err := dom_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "dom.js", size: 7240, mode: os.FileMode(420), modTime: time.Unix(1429333463, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _index_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x52\xcd\x6e\xf2\x30\x10\xbc\xfb\x29\xf6\x66\x47\x42\xe8\xfb\xd4\x1b\x88\x47\xe8\x85\x6b\x55\x55\x4e\xbc\x14\x97\xd8\x4e\xfd\x03\x45\x28\xef\x5e\xaf\x93\x90\xd0\xaa\x7b\x88\x6c\xcf\xee\xec\xcc\x6e\xce\xd2\x83\xc2\x2e\xc0\x0e\x5e\x18\xe4\xe0\xca\x99\xf5\x47\xe0\xec\x75\xcb\x18\xa1\xc6\xa9\xd4\xe2\x22\xa1\x95\x57\x97\x22\x5f\x0d\x37\x57\x07\xf4\x67\x59\xb7\xf8\xfb\xe5\x2d\x62\x88\x03\xd3\x21\xd9\x26\x6a\x67\xc1\xd9\x3d\x4a\x75\x05\x91\xfb\x54\x70\x63\xa5\xe6\x8e\x9a\xd3\xde\x5d\x40\xd8\x02\xc1\x18\x1e\x63\xf2\x16\x48\x18\xb6\x68\xd0\x46\x31\x83\x14\x56\x1a\xdc\x00\x97\xa3\x82\x29\x64\x8c\x5e\xd7\x29\x8b\xd8\xc0\xed\xe8\xf1\xb0\x01\x6b\xfa\xc7\x9c\x10\xaf\x6d\xae\xbd\x29\x1d\xba\x6c\x2c\xb3\xd4\xad\x6b\x4e\xfc\x47\x5a\xe3\x6c\xcc\x7d\x03\x31\xdc\x81\xbe\xda\x96\x73\x5f\xbe\xe5\x43\x03\xf3\xee\x32\x4f\x8b\xe2\x41\xf8\xa8\xf5\xf8\xc4\x57\x0b\x56\xfe\x3c\x4c\x99\xf7\x55\x29\xa3\x91\x4d\x7c\xb5\xcb\xe3\xda\xfd\x61\x7f\xa4\x53\xfa\xbc\x30\x3f\x99\x32\xd2\xbf\x6b\x9b\xe1\xff\xff\xba\xaf\xa5\xa5\xb9\x31\x89\x5d\xe7\x6b\x23\xa3\x18\x37\xbd\x36\xb2\x13\x65\x11\xd5\x20\x86\x7c\x96\x83\xc2\x83\xb6\x28\x48\x50\x7e\xea\x19\xf3\xf8\x99\xb4\x47\x41\x7f\xd0\x6a\x5a\x2d\x65\x7f\x07\x00\x00\xff\xff\x5f\x41\xef\x3c\x57\x02\x00\x00")

func index_js_bytes() ([]byte, error) {
	return bindata_read(
		_index_js,
		"index.js",
	)
}

func index_js() (*asset, error) {
	bytes, err := index_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "index.js", size: 599, mode: os.FileMode(420), modTime: time.Unix(1414646096, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _layout_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\x4d\x73\xda\x3c\x10\xbe\xfb\x57\xec\x29\x36\x13\x06\xde\x70\x84\x97\xe9\x64\xd2\xe9\xa1\x97\x66\xd2\xde\x12\x0e\xb2\x59\xb0\x3a\x42\x72\x25\xe1\xe0\x10\xfe\x7b\x77\x85\xc1\x1f\xf9\x3c\x56\x33\x60\x6b\xb5\x1f\xcf\xee\xf3\xd8\x1e\x8f\xa3\xf1\x18\xae\xe1\xbb\x28\xc5\xcf\xcc\xca\xc2\x83\x92\xa9\x15\xb6\x82\x95\xb1\x30\xf9\x0a\x4a\x54\x66\xeb\xc9\x2b\x62\xcf\x3c\x13\x3e\xb9\x8f\x45\x3c\x8c\x53\xfa\x65\xf1\x62\x00\xf3\xf9\x1c\x62\x91\x66\x31\x3b\x94\x6f\x3a\x3c\xe8\xf4\x41\x07\x27\xf6\xfb\x65\xa0\xd8\x7a\x70\x85\xc8\x10\x52\xf4\x8f\x88\x1a\x50\xe1\x06\xb5\x77\x43\xd8\x3a\x04\x9f\x23\xac\x45\x91\xe8\x5b\xb9\x43\xe5\x06\xb0\xda\xea\xcc\x4b\xa3\x47\x51\x54\x0a\x0b\x4b\x2c\x1c\xcc\xe1\x3e\x02\x5a\xf1\xd2\x6c\x46\xbf\x5d\x3c\x3c\xee\x4c\xea\xd0\x96\x22\x55\xc8\xc6\x68\x31\x8b\xa2\x53\x34\x18\x7d\x87\x62\x59\x25\x14\x31\x84\xc6\x71\x00\xfb\x28\x04\x13\xba\x50\x76\x50\xef\x4e\x46\x5e\x37\x16\x85\x47\xc0\x4d\xe1\xab\x1a\xbc\x59\x41\xac\x63\x28\x02\x48\x78\x94\x4b\x04\xa1\x97\x6d\x9b\x17\x4a\x8d\x42\x96\x33\x86\x63\x01\xaa\x08\xf5\xb2\xe8\xb7\x56\x03\x77\x51\x4f\x21\xd9\x6b\xb1\xc1\x29\x75\x26\xcb\x78\x08\xce\x57\x8a\x76\x7b\x2a\xe0\xf3\x29\x68\xb8\x84\xb8\xd8\xd1\x41\x8e\x72\x9d\xfb\xc6\x72\x38\x0c\x66\x21\xed\xe1\xdc\xce\x8d\xd1\x44\x0b\xea\x00\xbd\x9e\x71\x17\x0f\xb3\x26\x68\xee\x3b\xfa\x15\xc6\xb5\x91\x9d\x7d\x1c\xfa\x5b\xe3\x24\xdf\xbb\x64\xd7\xf1\xe1\xc5\x94\x54\x81\x90\xc5\xac\x73\xc0\x42\x4a\xf8\x54\xd2\xe1\x7f\x33\xba\xfc\x4f\x75\x46\x0a\xf5\xda\xe7\xbc\xbd\x9c\xc3\x55\x3f\x1b\xaf\xca\xdd\xcb\x05\xc5\xb4\x0a\x53\x5d\xb2\x1d\x31\x76\xab\x1c\x3a\xbb\x7a\x9c\x95\x6b\x9c\x1a\x07\xc6\xf2\xd4\x3a\x91\x2b\xa0\xbc\x20\xb5\xf3\x42\x67\x48\x84\xb6\xe4\xf3\xa3\x23\x90\x76\x8d\x27\x6e\x96\x1a\xd9\x10\x97\xed\xd9\xb4\x80\x1d\x68\xdc\xa4\xe4\x57\xe2\xfa\xc3\x7c\x0d\xe7\x87\x9a\xc8\x8c\xf6\xcc\xe5\x94\x72\xf6\x58\x7f\x8d\xb5\x04\xaf\x5e\xb0\xcb\xb3\xc0\x09\x01\xe2\x2a\x99\x32\x1a\xc9\xab\x85\x06\x27\xa3\xa0\x3c\xf2\x38\xdf\x7e\x09\xce\x1b\xb9\x93\x94\xb2\x36\xd6\x89\xa7\x7c\x99\xf5\x3b\xc0\xc9\x67\x14\x09\xb9\xb1\xf2\x89\x5a\xa2\xc7\xa5\x8a\x4e\xe0\x72\x42\x4f\xc5\xf7\x99\x73\xdf\x94\x11\x24\xf4\x58\xe1\xca\x73\xf7\x0a\x85\xa5\xad\x26\xd0\xf1\x61\xd6\x6d\x3b\x6f\x14\xdd\x6e\x97\xa9\x16\x0e\x2e\x2e\xc2\xa5\xc5\xf8\xb5\xb5\xa2\x82\xe7\x67\x10\x9f\x10\x42\x5f\x09\x3b\x46\x28\x5c\x57\x90\x22\xc0\x3e\xbc\x43\x6c\xfb\xa1\xe3\x36\xcf\x0c\xf2\xff\xbb\x93\x2a\xd1\x7a\x99\x75\xe6\x54\x7e\x38\xa7\xd4\xf8\xfc\x34\xa7\x53\xc4\x1d\xbf\x3b\x7a\x61\x96\x6d\x6f\xc4\x9d\xe7\x5b\xfe\xcb\xf3\xe5\xee\x0a\x73\x0c\x1a\x09\x25\xd7\xfa\xf8\x0d\x3a\x76\x46\xfa\x6d\x5a\x9f\x86\xfb\x17\x8a\xed\xbf\x0f\x5f\x30\xb3\xc4\x95\xa4\x67\xa5\xc1\xc9\x82\x9b\x86\xff\x61\x83\x23\xd8\xca\x8e\x8d\xde\xfc\x53\xfe\x3b\x26\xa4\xc4\xf4\x50\x58\xfc\xb3\x95\x16\x13\xfe\xa2\x0d\x4f\xdf\x27\x3a\x8a\xfe\x06\x00\x00\xff\xff\xd2\x26\xe3\x8d\x9f\x07\x00\x00")

func layout_js_bytes() ([]byte, error) {
	return bindata_read(
		_layout_js,
		"layout.js",
	)
}

func layout_js() (*asset, error) {
	bytes, err := layout_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "layout.js", size: 1951, mode: os.FileMode(420), modTime: time.Unix(1429220721, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _module_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\x4d\x8f\x9b\x30\x10\xbd\xf3\x2b\xe6\x06\xa8\x2b\xb2\x49\x6f\x9b\xa6\x97\xed\xf6\x50\xf5\x4b\x6a\x6e\x51\x0f\x14\x0f\x8b\x1b\xc0\x96\x6d\xd2\x44\x55\xfe\x7b\xc7\x31\x10\x20\x84\xac\x2a\x2d\x52\x14\xc5\xf3\xe6\xbd\x37\x1f\x26\xb3\x99\x37\x9b\xc1\xd3\x5e\xa2\xe2\x05\x96\xe6\x01\x62\x28\x04\xab\x72\x84\x44\x94\xda\xa8\x2a\x31\x42\x41\x4a\x1f\x77\xac\x23\x80\x75\xc6\x35\x88\x5f\xbf\x31\x31\xc0\x0b\x99\xa3\xcd\xd4\x60\x32\x84\xb5\xf8\x20\x0a\x28\xd0\x64\x82\x45\x44\xed\x79\x69\x55\x26\x86\x8b\xb2\xce\x0f\xc4\x3c\x84\xbf\x1e\xd0\xb3\x8b\x15\x88\x05\xac\xea\x9f\xf6\xe9\x68\x3e\xd4\x09\x77\x6d\x50\x61\xc9\x90\xce\x5b\xc6\xa0\xc0\xb0\x93\xdc\x70\xda\xb8\x26\xda\xcd\xcf\xe5\x45\xec\x24\x10\x5b\xb7\x97\x71\x5b\x64\x60\x41\x5b\xe0\x64\xf7\x82\xdb\x3e\x3c\xb5\xaa\x51\x16\xeb\x6f\x7f\xca\xef\x4a\x50\xdf\xcc\x21\xd8\x86\x63\xd8\x46\xd3\x1c\x48\xcc\x1c\x24\x8a\x94\x58\x37\xdb\x81\x6c\x97\xda\x42\x57\x2b\xf0\x9b\x12\xfd\x6b\xbc\x27\xbf\xb6\xce\x48\x56\x3a\x23\x03\xe3\x9c\x47\xc0\x5c\xe3\x04\x47\xdb\x8f\x1b\x3c\x17\xa7\xfd\x13\xf7\xeb\xa2\xdb\x8c\xef\xa8\x74\x26\x92\xca\x6e\x48\x94\x28\x8c\x0d\x3e\xb9\x7d\x09\x7c\x8a\xfa\x03\x3d\x3a\x8a\xb4\x39\xe4\x18\x15\xb1\x7a\xe6\xe5\x67\x4c\x0d\x31\xf8\xf3\x7b\xb9\xf7\x97\xe3\x22\x19\x53\x13\x22\xd9\x62\xa8\x41\xf8\x28\x96\x92\x96\xe9\x31\xe3\x39\x0b\x06\x99\x6b\xdc\x9b\xaf\x82\x61\xe0\x7f\x8a\x77\xf1\x8f\x44\x71\x69\xe0\xcb\x69\x15\xfd\x70\xc4\x6e\x97\x8a\xa8\xc3\x11\x97\x76\xb2\x6e\x58\x39\x96\xcf\x26\x83\xf7\x70\x3f\x36\x58\x87\xd1\x42\x99\x60\x64\x0e\x31\x63\x1f\xeb\xb5\xd0\x01\x29\xdf\x39\xfc\x00\x39\x32\x09\x2b\x7f\x9e\xf3\xb4\x85\x33\x6e\xc2\xc6\x63\x03\x72\x36\xda\x9c\xdb\x56\x14\x9a\x4a\x95\xb6\x6f\x67\xa8\x83\x1d\x97\xde\xe9\xbb\x7f\x09\xcf\x2f\x8b\xa6\x10\x31\xbf\x7d\xf9\xc4\x82\x2e\x19\xed\x84\x98\xf7\x2e\x5b\x2d\xe4\x74\x6a\x27\x62\xb1\xf4\x8e\x9d\x97\xd4\xb5\x26\x77\x5e\x59\x37\xf6\xed\x6d\xb3\x6f\x2f\xde\xb3\x56\xb0\xdd\xaf\xf1\xbd\xea\xf7\x87\x93\x89\xfb\x25\x7d\xbd\x83\xee\x6e\xd9\x93\x37\x2b\xe8\xf5\xcd\xc2\xf7\x04\x3f\xe1\x36\xbc\xd3\x12\x1b\x91\x13\xd5\xc8\xee\xe5\x91\x3d\x4f\xc3\x9c\xb6\x9e\x7d\x08\x9d\xa4\x61\x29\xb2\x8e\x1d\x87\x6d\xbf\xba\x54\xaf\xd9\xfa\x56\xf4\x7f\x5b\x3f\xbc\x57\xd7\xda\xbf\xa5\x94\x16\xfb\xea\x23\xd8\xbe\x7c\x04\x0c\x53\x5e\x62\xe0\xdc\xba\x7f\xdc\xe6\x9f\xd7\x3b\xda\xca\xff\x05\x00\x00\xff\xff\x67\xf0\x5e\x07\x22\x08\x00\x00")

func module_js_bytes() ([]byte, error) {
	return bindata_read(
		_module_js,
		"module.js",
	)
}

func module_js() (*asset, error) {
	bytes, err := module_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "module.js", size: 2082, mode: os.FileMode(420), modTime: time.Unix(1414646096, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _observable_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\xcd\x8e\xdb\x36\x10\xbe\xeb\x29\x98\x4b\x56\x46\x0c\x6d\xb1\x47\xbb\x46\xb1\x40\x0b\x14\x3d\x34\x01\x02\xf4\xb2\xd8\x03\x2d\x53\x16\x6b\x89\x54\x49\xca\x5b\x23\xf0\xbb\x77\x66\xf4\x43\x9a\xa2\x37\x45\x74\xb0\x25\x72\xfe\xe7\x9b\x8f\x7c\x7c\xcc\x1e\x1f\xd9\xe7\xbd\x15\xe6\xcc\xf7\x8d\x60\x7f\x7c\x85\x85\x0c\x17\xbf\xf4\xfb\x46\xda\x5a\x18\xcb\xb8\x3a\xb0\xaf\xfd\xde\x96\x46\xee\xf1\xdb\xd6\xdc\x08\xe6\x6a\x11\x68\xa2\x8a\x54\x4e\x98\x8a\x97\x62\xcd\xde\x6a\x59\xd6\xb0\x50\x36\xfd\x41\x80\x05\x76\x14\x2e\x5f\x91\x25\x3b\x59\xca\x57\xa8\x54\xf5\xaa\x74\x52\xab\x22\x9b\xde\x02\xab\xa0\xf2\x2d\xbb\x66\x99\x5f\x29\x3a\xa3\x9d\x76\x97\x4e\x14\xb3\x21\xb6\x9b\xad\xe4\x15\x6a\x30\x78\x64\xc5\xf2\x0f\xae\x96\xd6\xcb\x19\x3b\x6d\xe2\x13\xef\x81\x95\x97\xea\x75\x4b\xfb\x57\x26\x1a\x2b\xde\x11\x2e\xba\xde\xd6\xe0\x6c\x14\xa7\x5f\x23\x5c\x6f\x14\x89\x6e\xb3\xeb\x96\xaa\xa8\x8b\x96\x77\x18\x94\xc4\x22\xd8\x5a\x1b\x57\x63\x11\x2a\x6d\x98\xf6\x49\x79\xcb\xf9\x8b\x7e\x5d\xb3\x6a\x95\x4e\x19\x8c\x25\x93\x1d\x5d\x87\x66\x30\x0c\xb2\x34\xc7\x12\xb4\xf9\xcc\x9b\x5e\xd8\x6c\xee\xb1\x77\x01\xe6\x95\x78\xbb\x69\xc1\x36\x25\x57\x94\x5a\x59\x67\xfa\xd2\x41\x26\x3b\x8f\x16\x70\x35\xf7\x71\x5e\xcc\xcf\x53\xa0\x54\x47\xf2\x0e\x4a\xe7\x2d\xf6\x36\x65\xdc\x0a\x17\xe6\x79\x57\x7d\x6a\xf4\x7b\x7d\x3e\x73\xc3\x5a\x94\x1f\x1a\x73\xb7\xa3\xd0\x92\xdf\x78\x09\x4d\x5d\x54\x77\x7a\xaa\xbc\x15\x2b\x6f\xe1\xfa\x7e\xf7\x53\x79\x1d\x6f\xf3\x8a\xda\xe7\xb3\x1b\x2c\x44\x4d\x2b\x75\xdb\xf5\x8e\xa3\xa6\x2d\x58\xd8\xec\x15\x73\xfc\x44\x63\x06\x1e\x1d\xd3\x55\x80\x2d\x8b\x56\x10\x72\x9c\x95\xbc\x69\xf6\xbc\x3c\xcd\x01\xd0\xfa\xe0\x1c\xa7\x3c\x44\x24\x63\xcf\xea\xc2\x9c\x6c\x69\xb2\xf9\x80\x18\x44\xb1\x11\xff\x00\x74\x9c\x38\xb0\xe7\x3f\x7f\x45\x25\xa9\x20\x2a\x56\x73\xcb\x4a\x80\xf6\x51\x1c\xd6\x44\x0d\x47\x79\x16\x6a\x76\x49\xf4\x60\x99\xf8\x57\x94\xbd\x43\x11\xf4\x2c\x9d\x9d\x52\x0f\xcc\xe3\xb7\x38\x14\x99\x67\x9c\xef\xa0\x33\x25\x18\xc1\xd3\x8b\x6c\x3d\x3c\xfd\x62\xce\xcd\xd1\xe2\xac\x44\x30\x93\x07\xec\x16\x07\x2a\xd8\xfa\xf5\x0a\xd7\x82\x6f\xd4\x85\x25\xfc\x83\x9e\x2d\x11\xc7\x18\xe4\xfe\x7c\xd6\x60\xec\x01\x17\x1e\x18\x6f\xf7\xf2\xd8\x4b\x77\x29\x48\x1c\x35\x97\xe8\xd3\x21\xfa\x10\xe3\x1a\x2a\x6d\x1d\x57\xa5\x80\xfe\xfa\x0a\xc4\x20\xd5\x1e\xd4\xb3\x31\x50\xde\xdb\x58\x10\x9f\x56\x14\x52\x51\xa2\xdc\x51\x2d\xc3\xcd\x6b\x88\xf5\x6c\x5a\x81\x89\x4d\x16\xdc\xdb\x49\x21\x7c\x1e\x52\x12\x5a\xd0\x70\xa2\xd6\xff\x67\xb4\x69\x28\xa1\xc1\x39\x56\x5c\x82\xfe\x4f\x5b\xf8\xfb\x79\x39\xdb\x8d\x50\x47\x57\xc3\xe6\xa7\x4f\xa9\x32\xa0\x7a\x35\xf6\x2b\xd4\x7b\x91\xaf\xdb\x85\x70\x45\x21\xc5\xb5\x8a\x2b\x45\x03\x9c\x2c\x54\x9a\x03\xee\x14\x28\xc1\x0c\x2c\x3e\x9e\x30\x7a\xd8\xb3\x53\x02\x84\x27\x3a\x76\x3c\x96\x82\x9c\x47\x93\x77\xe0\xc4\x7e\x01\x04\x0d\x87\xf5\x86\xe9\x31\x49\xec\xbb\xf7\xa5\x9b\xc3\x5f\x23\x05\x47\x71\x45\x04\x3d\x8c\x4b\xc1\xbb\xae\xb9\xe4\xaa\x6f\x9a\x35\xc5\xb9\x8a\x64\xa9\xf3\x30\xab\x62\x72\x12\xd6\x02\x0c\x7d\xd8\xed\xbc\xcf\x8f\x1f\x17\x5d\xba\xe9\xe8\x1d\xb6\xff\x11\xba\x8f\xf9\xde\x0f\xc4\x35\x7b\xb7\x3b\xd4\xfb\x79\xf6\xec\x5d\x9a\x19\xd5\x91\xd1\x12\x5c\x44\xa3\x06\xd4\xf1\x3b\x50\xe5\xc5\x53\xb6\xd3\x40\xf2\x95\x03\x4a\x36\xfc\xcd\x2f\xc3\xdd\x4b\x13\xef\x7a\x0e\x07\xfb\xbc\x69\x7d\x20\xa8\xb6\xb8\x32\x2c\x26\x75\xac\xe1\xc8\x6a\xcf\xc6\xf0\x4b\x78\x30\x37\xb2\x04\x72\x05\x56\xc7\x38\xfb\x56\x28\x17\x8c\xc2\xf2\x1a\xe2\x93\xa1\xba\x51\x4e\xe9\xa4\x4a\xde\x81\xf2\x70\xad\x2c\x7b\x63\xc0\x32\x03\x7c\x02\x9d\x00\x3e\xe9\x6c\xfa\x5b\x94\x0e\x0e\x41\xe5\xb8\x54\x52\x1d\x6f\xce\x38\x5f\x6d\xc5\x3b\xb8\x66\x39\xcf\x9f\x84\x26\x88\x1d\x4f\x45\xb6\x03\x2c\x3d\x0c\xa6\x1e\x16\x04\x4b\xa3\x09\x00\x0b\x28\x34\xc6\xc4\x94\xe1\xe4\x65\x1e\x96\x90\x2b\xe3\xcb\xa3\x77\x70\x73\x2a\xed\xc6\xf2\xa6\x18\x69\x1a\x52\x9a\xe3\xc9\x5b\xcc\x39\x29\x3f\x53\xff\xf4\x13\x74\xef\xdb\x75\x49\x5f\xb8\x79\x4a\xb0\x1a\xd2\xe8\x09\x60\xc4\x74\x2a\x1e\x9f\x02\x1c\xf4\x9f\xdf\xd4\x17\xa3\x3b\x61\xdc\x25\x3f\xad\xee\x89\xe3\xa3\x9f\x5e\x4e\xaf\x10\x88\xef\x0a\x7c\xaf\x96\xde\x29\x9d\xc5\xea\x72\x65\x2a\xcb\xd3\x77\xd8\x37\xae\xcc\xa4\x37\x5d\xd8\xae\xc1\x7c\x76\xcb\x5b\x6a\x30\x98\xe1\x1d\x96\xd0\x7b\x10\x95\x54\x22\x1f\x04\x3d\x6f\x6e\x82\xf7\x35\xed\xcd\x9a\x1b\xff\x3a\xec\x74\x7e\xa7\xbb\xdd\xf1\x34\xb0\x09\xde\x87\x3d\x1b\xec\xd9\x68\x0f\x47\x7b\x43\xbf\xa3\xec\x58\xef\xcd\xfc\xb6\x1e\x28\x0b\x46\xef\x20\x3a\x23\x4a\x8e\x37\x38\xe0\x5e\x6e\x61\x7a\xa8\x55\x14\xbe\x58\x84\xe4\xea\x5e\x9d\x42\x8f\x19\x9d\x06\xff\x05\x00\x00\xff\xff\x59\x2a\xcc\x66\x3a\x0e\x00\x00")

func observable_js_bytes() ([]byte, error) {
	return bindata_read(
		_observable_js,
		"observable.js",
	)
}

func observable_js() (*asset, error) {
	bytes, err := observable_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "observable.js", size: 3642, mode: os.FileMode(420), modTime: time.Unix(1429331782, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assert.js": assert_js,
	"dom.js": dom_js,
	"index.js": index_js,
	"layout.js": layout_js,
	"module.js": module_js,
	"observable.js": observable_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"assert.js": &_bintree_t{assert_js, map[string]*_bintree_t{
	}},
	"dom.js": &_bintree_t{dom_js, map[string]*_bintree_t{
	}},
	"index.js": &_bintree_t{index_js, map[string]*_bintree_t{
	}},
	"layout.js": &_bintree_t{layout_js, map[string]*_bintree_t{
	}},
	"module.js": &_bintree_t{module_js, map[string]*_bintree_t{
	}},
	"observable.js": &_bintree_t{observable_js, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

