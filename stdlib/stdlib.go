package stdlib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _assert_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x52\x4d\x6f\x9c\x30\x10\xbd\xfb\x57\xbc\xee\x21\x18\xa5\x4a\xee\xbb\xda\x43\x2b\xe5\x9c\x1e\x7a\x2b\x3d\xb8\x30\x10\x97\xdd\x31\x6b\x9b\xd2\x55\xc5\x7f\xaf\xcd\x57\xd0\x96\x48\x95\x62\x09\x69\xc6\x8f\x99\xf7\xe6\x79\x1e\x1f\xf1\xf5\xc5\x9a\x0e\x8a\x41\xbf\x73\x6a\xbc\x36\x1c\x92\x02\x64\xad\xb1\x38\x93\x73\xaa\x22\xe8\x12\xbe\x33\x50\xb6\x6a\xcf\xc4\xde\x85\x88\xc0\xc6\x83\x2e\xad\x3a\x89\xb2\xe5\x7c\xa8\xa4\x8b\x54\xb9\x0f\x57\x1f\x43\xbb\x86\x72\x4f\x45\x8a\x3f\x02\x88\x1d\x26\x08\xc7\xe3\xf1\x16\x8d\xc7\x92\x6f\x2d\x1f\x62\xda\x83\x4e\x6e\x60\x95\xfe\xda\x90\x29\xb1\x2a\x4d\xcc\x8f\x9f\xa1\x36\x59\x95\xfe\x52\x16\xf5\x61\xce\xca\x20\x5c\xd6\xd0\xbc\xc5\x82\x49\xcb\x0c\x3d\xbc\x28\xf7\xdc\xf1\x17\x6b\x1a\xb2\xfe\x2a\xeb\x14\x77\x77\xa8\xf1\x21\x32\xe5\x86\x9d\xb7\x6d\xee\x8d\x4d\x6e\x7a\x0c\x67\x19\xf7\x5b\xfd\xfd\x75\xe2\x90\xa4\x87\xf5\xbf\xbd\xb8\x0d\x5e\x25\x8e\xf5\x1b\x02\x47\xe0\x5d\xf2\xd6\x73\x06\x51\x83\x7b\x2d\x17\x54\x6a\xa6\x22\xf6\x59\xc4\x0f\xfd\x16\x68\xab\xd7\x6c\xb3\xf3\x2a\xaf\x71\x04\x53\x87\xa7\xb8\x23\x32\x7d\x18\xee\x0e\x9b\x25\x3e\x6e\x97\xdc\x7d\x72\x2e\xc8\x8f\x1b\x52\x2a\x7d\x0a\xae\x67\xfc\x3c\xbc\x22\xb4\xc3\x59\x3b\xa7\xb9\x42\x4d\xd7\x3d\x76\xb8\x0f\xe3\xdd\x23\xc9\x38\xe3\x24\x04\x72\xc5\x34\x51\xa5\xff\x72\xf5\x6f\xfb\x3d\x2d\xd3\x32\xd2\xdb\x92\x9e\x26\xaf\xf6\x19\x47\x19\xb3\x75\x21\xdc\x65\xfc\xb9\xf5\xa8\x8c\x9f\xb0\x69\x1f\xff\x47\x67\x2f\x7a\x21\x46\x67\xe5\x28\x82\x2e\xfb\xf0\x89\x3e\xe0\xe2\x6f\x00\x00\x00\xff\xff\x1c\xe6\x04\x4f\x82\x03\x00\x00")

func assert_js_bytes() ([]byte, error) {
	return bindata_read(
		_assert_js,
		"assert.js",
	)
}

func assert_js() (*asset, error) {
	bytes, err := assert_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assert.js", size: 898, mode: os.FileMode(420), modTime: time.Unix(1418359115, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dom_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x59\x5f\x6f\xdb\x38\x12\x7f\xf7\xa7\xe0\xbd\xac\x6c\xac\xab\x36\xe9\x5b\x7c\xb9\x22\xd7\x2e\xb0\xb7\xd8\x6e\xef\xb6\x05\x16\x77\x41\x80\xa5\xa5\x71\xac\x5a\x16\x7d\x24\xe5\x58\x08\xfc\xdd\x6f\x86\x14\x29\x52\x7f\xd2\xb4\x57\x3d\x34\x16\x39\xfc\x71\xf8\x9b\xbf\x54\x5f\xbe\x9c\xbd\x7c\xc9\xde\x8b\xbc\x2e\x81\x55\x7c\x0f\x57\x33\x3b\x44\x4f\x2e\xf6\xed\xdb\x3b\x50\x99\x2c\x0e\xba\x10\x55\x28\x90\xa0\x44\xc2\x0a\xc5\x38\xfb\x85\x1f\xf9\x47\x23\xc3\xf6\x16\x6d\x23\x24\xcb\x24\x70\x5d\x54\xf7\xec\xe7\x4f\xef\x7f\x65\x50\xc2\x1e\x2a\xad\x52\xb7\xfe\xd3\x16\x9c\x34\x9c\x0e\x42\x81\x62\xfa\x41\x30\xb1\xfe\x0c\x99\x66\x99\xa8\x94\x96\x75\xa6\x85\x54\x4b\x96\x18\x2c\xf8\xc9\x62\x24\x8c\x57\x39\x4b\x5a\xc4\x24\x42\xdc\xd4\x55\x46\x9a\xa2\x5a\x59\x06\xa8\x90\xc6\x41\x85\x67\x63\x5c\xde\xd7\x46\x83\x25\x2e\xb7\x3a\x69\x7e\x6f\xce\x6d\x46\xb8\xd6\xb2\x58\xd7\x1a\x94\xc3\xb3\xaa\xd8\x49\x29\x79\xc3\xc4\x86\xa9\x7a\xed\x4e\xb2\x34\x6a\xe0\x24\x1c\xf1\xf5\x67\x7c\x29\x41\xaa\x76\x55\x6a\xd4\xf1\x64\x16\x9b\x0d\x48\xa8\x32\x20\xc2\xf4\x96\xeb\x4e\x7d\x86\x67\xd7\x07\x51\xd1\xf9\x51\x57\xcb\x9a\xa8\x68\x33\xc4\xae\xab\x1c\x64\xd9\x10\x8d\xef\x3e\xbc\x77\x78\xed\xda\x25\x7b\xd8\x22\x2c\x57\x03\x82\xec\xab\x32\x1a\x4a\xd0\xb5\xac\x2c\x3a\x62\xb8\xc5\x69\x60\xcb\x68\xf5\xfc\xb4\x60\xd7\xd7\xd7\x4e\x0e\x5f\x53\x54\x1d\xd5\x98\x2f\x82\x25\x7f\x6f\x9c\xe2\xa4\x5b\x5f\xf3\x76\x2f\x54\x10\xc7\xcd\x31\x0a\x34\x05\x28\xe7\x20\x9e\x63\xc3\x85\xd5\xd0\x6d\xd8\x32\xa8\xd8\x43\xa1\xb7\xa2\xa6\xe9\xff\xd6\x85\xa4\x6d\x38\x5b\x4b\xf1\xa0\x40\x32\xf4\x2f\xff\xe2\xb0\x54\xb1\xaf\x4b\x8e\x1e\x83\x56\xca\xb6\x0c\x69\xf9\x45\xbd\x13\x7b\x92\xfd\x8f\xd8\xaf\x0b\x40\xa3\xdc\xb0\x35\x97\xf0\x62\x6d\xf8\x0e\xfc\xb6\xa8\x34\xc8\x03\x2a\x12\xc0\xb5\x20\xbf\x89\x1c\xd2\xcf\xa4\x4e\x59\xe2\xe0\x66\x53\x64\x10\x92\xf7\xaf\x2b\xf6\x07\x9d\xa2\xd8\xb0\x7d\xc3\xf8\xe1\x50\x16\x99\x25\x22\x6f\xd0\xbb\xf0\xa5\x2c\x1b\x56\x1f\x72\x63\x11\x81\xd4\x48\x7f\xd4\xce\xe9\xde\x04\x88\x37\x57\xec\x1f\xe8\xfe\xc0\x73\xe3\x72\xa0\xb5\xe3\xd8\xcb\xa3\x4b\x49\x24\xa9\x6c\x96\x14\x3d\x12\x94\xb5\x6f\x0e\x07\x32\x55\x95\x35\x86\x3d\x07\x88\x0f\x1a\xe1\xc3\x1a\xc9\x3a\xf2\x35\x46\xdc\x91\xcb\x82\x7e\x20\x23\xff\x16\xb5\xb4\x2e\xcc\xb6\xd6\x87\x99\x42\xda\xcb\x9c\x36\x36\xa0\xc2\xaf\x0b\xf0\x1c\x82\x71\xb1\xc6\x60\xb4\x67\x6a\x57\xaf\xa1\x0b\x62\xc8\x59\xad\xdc\x19\x3a\xb8\x38\x48\x6c\xd2\x61\x65\xb1\x96\x5c\x36\x96\xee\x1c\x0d\x92\xf5\xb5\x08\x58\xa0\xcd\x2d\xb3\xce\xe5\x02\x34\x4f\x72\xd5\x30\x5d\x60\x0a\x28\xd0\xa9\x8e\xbc\xac\x51\x33\x3c\xea\x3d\xa8\xd6\x8c\x91\x25\x1b\xd4\x02\x54\x95\x68\x1f\x00\x0b\xc6\x6b\x2d\xf6\x68\x53\x6b\x4a\x1b\x2d\x81\x42\xca\xe4\x3b\xe4\x10\xd5\x6e\x17\x85\xcc\x3b\x6d\xd3\x9e\x89\x37\x96\xb7\xd0\x63\x30\x3b\xec\x31\xaa\x70\x13\xa5\x69\x3f\xa2\x50\x9b\x48\xf7\xd9\x94\xce\x09\x27\x2d\x79\xb0\x85\x8b\x98\xcc\x30\x9f\x43\xc9\x0d\x80\xd4\xf5\xc1\x9e\x9c\x78\x22\x6b\x60\x06\x64\x7b\xd8\x0b\x54\xd4\xb8\x53\xb7\x75\x64\x05\x7b\xfe\x0a\x20\x37\x3a\xcf\x66\x68\x6d\xf2\x2d\xc5\xae\xd9\xed\xcc\x64\xff\xc0\x8a\x9f\x55\x32\xbb\x5b\xcd\x66\x2e\xf7\x32\x51\xfd\x8e\xbe\xdb\xcc\x3b\x99\x05\x7b\x9c\x99\x75\xb8\xcb\x4d\x8e\xae\xa5\x1b\xb4\x63\xa2\x12\xe3\xa6\xad\x51\x12\x33\x7a\xab\xee\x12\xa6\x45\x3f\x5d\x61\xc2\xc4\x4c\x4f\x10\x7e\x1b\x9e\xe7\x1f\x69\xc5\x1c\x13\x78\x60\x8c\xa5\x45\xc7\x3f\xb4\xab\x3b\x14\x46\xe7\xdc\xe1\x63\xb4\x23\x3b\x98\x8d\x31\xba\x82\x73\x7c\x88\xd4\x65\xc1\x03\xa9\x5f\x7a\xcd\xdc\xcf\xf4\x1e\xd0\x37\x56\x91\x20\xf1\x24\x50\x26\x40\xc5\x8a\x41\xf5\x73\x8d\xf9\xf3\xd6\x2d\xbd\x5b\xfa\x53\xcc\x8f\xb8\x59\x84\x7f\x5c\x9d\x7b\xa8\xc1\xe1\xd2\x43\xad\xb6\x73\x11\x08\x9c\x91\x21\x05\xcf\x51\x38\x58\x33\xb3\xff\x86\x26\xe9\x82\x2a\xd9\xc5\x66\x39\x3e\xdf\x1e\x37\x0e\x64\x60\x93\xdd\x92\x1d\xfb\xf6\x38\x7e\x8b\x21\x40\x77\x9b\x10\xa8\x35\xc3\xd7\xd9\xe1\x38\x62\x80\x3e\xee\xe2\xfb\x98\x61\x08\x3b\x6e\x05\xcf\xe2\x7e\xf7\x11\xf4\xdb\x6d\x51\xe6\x58\x75\xe7\x11\x03\x6d\x9d\xf4\xa2\x14\x60\x43\x86\x8a\xaa\x02\x69\xfa\x9b\x6b\x96\x24\x43\x5e\x4e\xca\x12\x33\xe6\xbf\x94\xc7\xe6\x24\x54\xa0\xcc\xab\x15\xfe\xf9\x2b\xca\xa7\x25\x54\xf7\x7a\x8b\xaf\x3f\xfe\xd8\xdf\xcf\xa3\xe2\x82\x93\xba\x2d\xee\x56\x83\x69\x9a\xd2\xcd\x81\x8c\x7c\x32\x9d\x05\x06\x3a\x95\xf3\x84\xbd\xc1\x5c\x93\x99\xae\x2c\xb5\x49\xf5\x13\x66\x36\xaa\xb7\xd4\x83\x5c\xb1\xd3\x10\x8b\xdc\xc6\x61\xb5\x6d\x89\x85\x74\xa4\x24\x63\x0a\xb6\x4a\x9c\x7c\x23\x33\x04\xee\x63\x23\x39\xcf\x03\x66\x26\x82\x7e\x13\x1a\xae\xd8\x4d\x15\x96\xa9\x7b\x40\x43\x70\x2a\x7e\xeb\x86\xea\x6f\xe0\x8c\xd3\x40\xf6\xf9\x68\x6b\xa8\xde\x62\x41\xc0\x42\x8a\x91\x85\x28\x6d\x10\x86\x75\xe7\x86\xfa\xd2\x37\x13\x68\xf6\xc8\x23\x56\x6e\x9f\xf3\x60\x70\x38\x02\x29\xd6\x08\x24\xcd\x38\x24\x5a\x25\x06\xea\xe4\xcf\x2b\xe7\xcc\x2e\xa7\xbc\xb5\x55\x92\x47\x49\xc3\xa4\x15\xd7\x76\xb3\xa4\xda\x27\xcb\xa0\x07\x72\xcd\x7f\xc2\x55\xd2\x66\x71\x3f\x84\x6f\xc9\xd2\x61\x4f\x74\xe4\x2c\x39\xd1\xc2\xb6\x2d\x6f\x57\xa2\x48\xd4\xdd\xa0\x14\xa8\x7e\xea\x8a\x1b\xe0\x83\xf2\xf5\x8a\x1e\x93\x4c\x02\xd2\xb1\x06\x52\xb9\x73\xd3\x81\xdb\x50\x81\x0c\xfc\xbb\xef\x31\xa6\x7e\x3e\x9a\x9b\x16\xfe\x3e\x87\x99\x60\x16\xb8\x40\xcb\x1c\xf1\x56\x61\x2c\x44\x7a\x00\x22\xf4\x62\xa6\xd3\x3a\x25\xe8\xc5\x2a\x02\x8b\x52\xbb\x8a\xb0\x38\xa9\x83\xab\xba\xe9\x55\x34\xbf\x5b\x45\x67\xe4\x83\x5c\x63\xb2\xc5\x0e\x93\x38\x1b\xce\x75\xab\xd2\x2d\x57\x1f\x1e\xaa\x7f\x4a\x71\x00\xa9\x9b\xf9\x6e\xc1\x7e\xf8\x81\xed\xd8\x5f\x2c\x53\x68\xe4\x84\x06\xb8\xba\xdd\xdd\x99\x41\xba\xf3\x6c\x8a\x0a\xf2\xa9\x88\xfb\x52\xa1\x31\x50\x23\x3e\x7f\x9e\x72\xde\x01\x63\xa6\xaf\x88\xc8\xb0\xde\x68\xf8\x32\x3f\x57\xc3\xce\x62\x94\x1e\xb3\x96\x28\x1a\x15\x89\xd6\xf7\x89\x52\x86\x28\x5f\xc8\x9f\x4b\xcd\x17\x7a\xa2\xff\x87\x96\x8c\xb2\x80\xbf\xca\x47\xfc\x9c\x5a\x67\x6a\x1b\x56\x15\xf3\x73\x1a\xf8\x47\x98\x6c\x9f\x8e\x1a\x7a\xe2\x34\x34\x59\x34\x54\xbf\x0f\x18\xad\xca\x9d\x52\x5f\xdd\x7f\xc4\x27\x46\x39\x53\xf5\x46\xb3\xab\x65\xc4\x08\x3d\x91\x83\xbf\xd0\xa9\x98\xe5\xcb\x41\x4f\x30\x81\xf5\x64\x83\xe2\x29\x99\x0d\x86\xbe\xad\xea\x7b\x1e\xa6\x2b\xbf\xa1\xe1\x3b\x56\x7f\x7a\xbe\xb9\x03\x70\xca\x7c\xa1\x0b\x18\xec\xf1\x35\x9d\x00\x3d\x03\x2b\xf4\xab\xe6\x98\x4a\x4f\x78\x08\x1b\xab\xcb\xd3\xa3\x4f\x57\xec\xe1\xba\xa7\xe2\x3d\x2e\x9c\x71\x21\x6a\xe3\xdd\x4d\xae\xc6\xea\x21\xb4\x91\x6d\x4b\xf1\x80\xb7\xae\x7e\xc0\x64\xfd\x80\x91\xfa\x31\xc5\x3f\x1e\x3d\xcf\x7f\x22\x9d\x7f\x2d\x94\xa6\xee\x8b\x5a\x6e\xf8\xf6\x6a\x40\x0a\x84\xe6\xb4\x11\xc1\xfe\xc6\x5e\xf5\x55\x68\x5b\xf3\xf1\x28\x8e\x12\xb1\xbf\x77\x2c\x1e\xdd\x77\xaf\xe8\xa6\x11\x6c\xef\xe7\x7b\xd7\xb5\xdf\xed\x38\x67\x59\x29\x2a\x70\xdf\xdb\x8a\xea\x50\xbb\x8f\x67\xed\xe7\x96\x83\x14\x5a\x90\x2d\x70\x72\x0b\xb2\x30\xb9\xae\xd7\xfa\xbc\x25\x8c\x39\x9e\xe7\xdc\x6b\x89\xcc\xb8\x08\x0f\x6a\x44\xd3\x0e\x14\xb3\xd6\xaa\xaf\x6c\x05\x0f\x0e\x72\x42\x6d\xd2\xb5\xae\xda\x0f\x85\x89\xb8\x68\x3f\xe7\x8a\xcb\x24\x65\xec\x8f\x2d\x54\x6c\x2d\x90\x64\x2a\x24\xbc\x30\xe2\x0e\xc0\x7c\xc7\xdd\x41\xb3\x34\x18\xf6\x76\x8a\x12\xb4\x14\x9b\xca\x1d\x7a\xdb\x41\x42\x06\xf4\xfd\xab\x7f\xca\x7d\x71\x2a\xaa\xb9\xb8\xc0\xaa\x78\x19\x1e\xc9\xa4\xdf\xd7\xd4\x96\x9d\x27\x9b\x9f\xce\x4d\xc5\xc5\x58\x19\x13\x17\xcf\x73\x51\xf1\x9a\x3a\x1c\x24\xed\x02\xff\x4e\x36\xd2\x63\xdb\x5e\x8e\x6e\x7b\x39\xde\x59\x89\xcb\x67\x35\x52\x5e\x9b\xcb\x67\x69\xe3\x1c\xfc\x75\xdf\xaa\x25\x6c\xf4\x8b\x8d\x28\xf3\xa8\x61\x57\x6e\x3a\xe3\x2a\xe3\x39\x98\xa6\x44\x99\x3e\x80\x32\xc2\xe3\x99\xfd\x69\x4c\xf2\x27\x95\x8e\x57\x77\xe1\xdb\x45\xf7\x96\xa6\x69\x38\xf3\xe2\xe2\xae\xe7\xa3\x03\xf0\xc1\x65\x19\xeb\x98\x84\xbc\xce\x60\x6e\x70\x96\xb8\x75\xdf\x31\x9d\xaa\xee\x7b\xdf\x63\xfb\x7f\x02\xbe\x2d\xf6\xdd\x93\x6b\x6e\x96\x3e\x27\x9e\x17\x21\x88\x57\xcc\xf5\xe4\x3c\xbe\x49\x04\xa9\x91\x3f\xdd\xf4\xf0\xe0\xaa\xc0\x27\xae\x0a\x74\x3b\x34\x2d\x3f\x8a\x72\xfb\xab\x77\x2d\xe1\x61\x73\x3f\x70\x09\x0b\x10\x08\x18\x98\xe0\x36\x10\x98\xbf\x45\xb3\x26\x36\xcf\x38\x5a\x20\x60\xd0\x6c\xaf\x3c\x04\x72\x4c\x4e\x02\x05\x02\x06\xc8\xf7\x95\x43\x2c\x7f\xb1\x9b\xc2\x0a\x04\x0c\x96\xaf\x59\xf1\x27\x98\xd6\x68\x5d\x82\xf3\xed\x45\x90\xb4\x43\x3b\xb5\x2e\x16\x5f\xc3\x68\x47\xe7\x61\xab\xde\xb7\x1d\x88\xdc\xa2\x07\x43\x99\x33\xf0\x9b\xc8\x49\xed\x89\xe6\xdd\x9a\x68\xcf\xab\xf8\x75\xd9\x49\x51\x22\xbe\x62\xd1\x6b\x37\x6b\x02\xa2\x9b\xb5\xf1\xd1\xad\x0d\x63\xeb\x2a\x7e\xed\xa4\xbc\x06\xd1\x6b\x37\x0f\xf1\xbc\xfb\x3a\x6e\x8e\x86\x47\xc4\xe3\xd9\xff\xdd\x81\x39\x7d\x5e\x5e\xba\x4f\xc7\x74\x89\x9d\xfd\x2f\x00\x00\xff\xff\x45\x10\x64\xc0\xa0\x1c\x00\x00")

func dom_js_bytes() ([]byte, error) {
	return bindata_read(
		_dom_js,
		"dom.js",
	)
}

func dom_js() (*asset, error) {
	bytes, err := dom_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "dom.js", size: 7328, mode: os.FileMode(420), modTime: time.Unix(1424476977, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _index_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x52\xcd\x6e\xf2\x30\x10\xbc\xfb\x29\xf6\x66\x47\x42\xe8\xfb\xd4\x1b\x88\x47\xe8\x85\x6b\x55\x55\x4e\xbc\x14\x97\xd8\x4e\xfd\x03\x45\x28\xef\x5e\xaf\x93\x90\xd0\xaa\x7b\x88\x6c\xcf\xee\xec\xcc\x6e\xce\xd2\x83\xc2\x2e\xc0\x0e\x5e\x18\xe4\xe0\xca\x99\xf5\x47\xe0\xec\x75\xcb\x18\xa1\xc6\xa9\xd4\xe2\x22\xa1\x95\x57\x97\x22\x5f\x0d\x37\x57\x07\xf4\x67\x59\xb7\xf8\xfb\xe5\x2d\x62\x88\x03\xd3\x21\xd9\x26\x6a\x67\xc1\xd9\x3d\x4a\x75\x05\x91\xfb\x54\x70\x63\xa5\xe6\x8e\x9a\xd3\xde\x5d\x40\xd8\x02\xc1\x18\x1e\x63\xf2\x16\x48\x18\xb6\x68\xd0\x46\x31\x83\x14\x56\x1a\xdc\x00\x97\xa3\x82\x29\x64\x8c\x5e\xd7\x29\x8b\xd8\xc0\xed\xe8\xf1\xb0\x01\x6b\xfa\xc7\x9c\x10\xaf\x6d\xae\xbd\x29\x1d\xba\x6c\x2c\xb3\xd4\xad\x6b\x4e\xfc\x47\x5a\xe3\x6c\xcc\x7d\x03\x31\xdc\x81\xbe\xda\x96\x73\x5f\xbe\xe5\x43\x03\xf3\xee\x32\x4f\x8b\xe2\x41\xf8\xa8\xf5\xf8\xc4\x57\x0b\x56\xfe\x3c\x4c\x99\xf7\x55\x29\xa3\x91\x4d\x7c\xb5\xcb\xe3\xda\xfd\x61\x7f\xa4\x53\xfa\xbc\x30\x3f\x99\x32\xd2\xbf\x6b\x9b\xe1\xff\xff\xba\xaf\xa5\xa5\xb9\x31\x89\x5d\xe7\x6b\x23\xa3\x18\x37\xbd\x36\xb2\x13\x65\x11\xd5\x20\x86\x7c\x96\x83\xc2\x83\xb6\x28\x48\x50\x7e\xea\x19\xf3\xf8\x99\xb4\x47\x41\x7f\xd0\x6a\x5a\x2d\x65\x7f\x07\x00\x00\xff\xff\x5f\x41\xef\x3c\x57\x02\x00\x00")

func index_js_bytes() ([]byte, error) {
	return bindata_read(
		_index_js,
		"index.js",
	)
}

func index_js() (*asset, error) {
	bytes, err := index_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "index.js", size: 599, mode: os.FileMode(420), modTime: time.Unix(1414646096, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _layout_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x54\xcb\x6e\xdb\x3a\x10\xdd\xeb\x2b\x66\x15\xca\x88\x21\xdf\x78\x69\x5f\xa3\x08\x52\x74\xd1\x4d\x83\xb4\xbb\xc4\x0b\x4a\x1e\x5b\x2c\x68\x52\x25\x69\xc5\x8a\xe1\x7f\xef\x0c\xfd\x90\xe4\x24\x4d\x77\x25\xa0\x07\x47\xf3\x38\x73\xe6\x88\xa3\x51\x32\x1a\xc1\x2d\x7c\x95\xb5\xfc\x5e\x38\x55\x05\xd0\x2a\x77\xd2\x35\xb0\xb4\x0e\xc6\x9f\x41\xcb\xc6\x6e\x02\x79\x25\xec\x59\x16\x32\xa4\x8f\x42\x8a\xa1\xc8\xe9\x2a\xc4\x7c\x00\xb3\xd9\x0c\x84\xcc\x0b\xc1\x0e\xf5\xbb\x0e\x4f\x26\x7f\x32\xd1\x89\xfd\x7e\x58\xa8\x36\x01\x7c\x25\x0b\x84\x1c\xc3\x33\xa2\x01\xd4\xb8\x46\x13\xfc\x10\x36\x1e\x21\x94\x08\x2b\x59\xa5\xe6\x5e\x6d\x51\xfb\x01\x2c\x37\xa6\x08\xca\x9a\x2c\x49\x6a\xe9\x60\x81\x95\x87\x19\x3c\x26\x40\x4b\x2c\xec\x3a\xfb\xe9\xc5\xf0\xb0\xb3\xb9\x47\x57\xcb\x5c\x23\x1b\x93\xf9\x34\x49\x4e\xd1\x60\xcd\x03\xca\x45\x93\x52\xc4\x10\x5a\xc7\x01\xec\x92\x18\x4c\xe8\x62\xd9\xc1\x71\x77\x32\xf2\xba\x73\x28\x03\x02\xae\xab\xd0\x1c\xc1\xdb\x25\x08\x23\xa0\x8a\x20\xe1\x59\x2d\x10\xa4\x59\x74\x6d\x41\x6a\x9d\xc5\x2c\x67\x0c\x87\x02\x54\x11\x8e\xcb\x61\xd8\x38\x03\xdc\xc5\x91\x85\x74\x67\xe4\x1a\x27\xd4\x99\xaa\xc5\x10\x7c\x68\x34\xed\x76\x54\x20\x94\x13\x30\x70\x0d\xa2\xda\xd2\x87\x12\xd5\xaa\x0c\xad\x65\xbf\x1f\x4c\x63\xda\x7d\xbc\x9f\xd0\xdf\x59\x43\xa3\x41\x13\xe1\x1f\x79\xee\x63\xe2\xc9\x49\xe2\x7e\x4b\x57\x65\x7d\x17\x1d\xd3\xdd\x30\xd9\x5b\x3f\xed\x19\x5f\xe2\x04\xe6\xad\x51\x2d\x21\x25\x4f\x65\x7c\x90\xa6\x40\x22\xa7\x33\x8a\x6f\x3d\xb2\xa1\xb3\xb6\x9c\xa7\xf1\xd9\x0a\x43\x3a\x68\xb3\xed\xcf\x6f\xac\xc6\x94\x2b\x2a\x72\xfc\x6f\x4a\x8f\xff\x29\x28\xd3\x68\x56\xa1\xe4\xed\xf5\x0c\x6e\x2e\xb3\xbe\xf8\x47\x35\x27\x7f\x8f\xe1\xde\x7a\xc5\x5d\xa6\x5b\xb6\x1d\x1a\x7c\xab\xce\x87\x73\x28\xac\x09\xcc\xdd\x84\xb2\xb7\x4c\xf7\x99\xec\xd6\xc3\x9b\x37\xd9\xc4\x31\xe1\xe2\x2a\x85\xb6\x06\xc9\xab\x83\x06\xc7\x59\x9c\x36\x79\x9c\x5f\x3f\x45\xe7\xb5\xda\x2a\x4a\x79\x34\x1e\x13\x4f\xf8\x31\xbd\xec\x00\xc7\x3d\x6c\xef\x28\x00\x4a\xeb\xd4\x0b\xb5\x44\x12\x6d\x92\x13\xb8\x92\xd0\x53\xf1\x5d\xe1\xfd\x17\x6d\x25\x89\x4b\x68\x5c\x06\xee\x5e\xa3\x74\xb4\x35\x04\x5a\xec\xa7\xfd\xb6\xcb\x56\x41\xdd\x76\x59\x12\xd2\xc3\xd5\x15\x48\x9f\x11\x7d\x3e\xb8\x4d\x11\x68\x9e\x7c\x2e\xdc\x3a\x27\x9b\x37\xd5\x20\x3b\x3d\xf1\x92\x11\xd2\xfe\x0f\x43\xeb\x0a\x98\x5b\xf8\xeb\xff\x00\x6a\x74\x41\x15\x3d\x0e\xea\x0f\x39\xc8\x6d\x28\x4f\x1c\x9c\x22\x1e\xf8\x5f\xbc\x08\x73\x6c\x7b\x27\xee\xcc\x5d\xfd\xaf\xb8\x63\xe4\x95\x3d\x04\x65\x52\xab\x95\x39\x9c\xd7\x07\xd4\xa4\xbb\xb6\xad\x49\x7c\x7f\xa5\xb4\xcb\x73\xe3\x15\xeb\x0b\x5c\x2a\xd2\x78\x8b\x93\x85\x32\x89\xf7\x61\x8b\x23\xda\xea\x9e\x8d\x4e\xc9\x09\xdf\x0e\x09\x29\x31\x89\xd9\xe1\xaf\x8d\x72\x98\xf2\xe9\x3f\x3c\x9d\xe5\xf4\x29\xf9\x1d\x00\x00\xff\xff\x59\x15\xc5\xfa\xcb\x06\x00\x00")

func layout_js_bytes() ([]byte, error) {
	return bindata_read(
		_layout_js,
		"layout.js",
	)
}

func layout_js() (*asset, error) {
	bytes, err := layout_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "layout.js", size: 1739, mode: os.FileMode(420), modTime: time.Unix(1418359115, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _module_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\x4d\x8f\x9b\x30\x10\xbd\xf3\x2b\xe6\x06\xa8\x2b\xb2\x49\x6f\x9b\xa6\x97\xed\xf6\x50\xf5\x4b\x6a\x6e\x51\x0f\x14\x0f\x8b\x1b\xc0\x96\x6d\xd2\x44\x55\xfe\x7b\xc7\x31\x10\x20\x84\xac\x2a\x2d\x52\x14\xc5\xf3\xe6\xbd\x37\x1f\x26\xb3\x99\x37\x9b\xc1\xd3\x5e\xa2\xe2\x05\x96\xe6\x01\x62\x28\x04\xab\x72\x84\x44\x94\xda\xa8\x2a\x31\x42\x41\x4a\x1f\x77\xac\x23\x80\x75\xc6\x35\x88\x5f\xbf\x31\x31\xc0\x0b\x99\xa3\xcd\xd4\x60\x32\x84\xb5\xf8\x20\x0a\x28\xd0\x64\x82\x45\x44\xed\x79\x69\x55\x26\x86\x8b\xb2\xce\x0f\xc4\x3c\x84\xbf\x1e\xd0\xb3\x8b\x15\x88\x05\xac\xea\x9f\xf6\xe9\x68\x3e\xd4\x09\x77\x6d\x50\x61\xc9\x90\xce\x5b\xc6\xa0\xc0\xb0\x93\xdc\x70\xda\xb8\x26\xda\xcd\xcf\xe5\x45\xec\x24\x10\x5b\xb7\x97\x71\x5b\x64\x60\x41\x5b\xe0\x64\xf7\x82\xdb\x3e\x3c\xb5\xaa\x51\x16\xeb\x6f\x7f\xca\xef\x4a\x50\xdf\xcc\x21\xd8\x86\x63\xd8\x46\xd3\x1c\x48\xcc\x1c\x24\x8a\x94\x58\x37\xdb\x81\x6c\x97\xda\x42\x57\x2b\xf0\x9b\x12\xfd\x6b\xbc\x27\xbf\xb6\xce\x48\x56\x3a\x23\x03\xe3\x9c\x47\xc0\x5c\xe3\x04\x47\xdb\x8f\x1b\x3c\x17\xa7\xfd\x13\xf7\xeb\xa2\xdb\x8c\xef\xa8\x74\x26\x92\xca\x6e\x48\x94\x28\x8c\x0d\x3e\xb9\x7d\x09\x7c\x8a\xfa\x03\x3d\x3a\x8a\xb4\x39\xe4\x18\x15\xb1\x7a\xe6\xe5\x67\x4c\x0d\x31\xf8\xf3\x7b\xb9\xf7\x97\xe3\x22\x19\x53\x13\x22\xd9\x62\xa8\x41\xf8\x28\x96\x92\x96\xe9\x31\xe3\x39\x0b\x06\x99\x6b\xdc\x9b\xaf\x82\x61\xe0\x7f\x8a\x77\xf1\x8f\x44\x71\x69\xe0\xcb\x69\x15\xfd\x70\xc4\x6e\x97\x8a\xa8\xc3\x11\x97\x76\xb2\x6e\x58\x39\x96\xcf\x26\x83\xf7\x70\x3f\x36\x58\x87\xd1\x42\x99\x60\x64\x0e\x31\x63\x1f\xeb\xb5\xd0\x01\x29\xdf\x39\xfc\x00\x39\x32\x09\x2b\x7f\x9e\xf3\xb4\x85\x33\x6e\xc2\xc6\x63\x03\x72\x36\xda\x9c\xdb\x56\x14\x9a\x4a\x95\xb6\x6f\x67\xa8\x83\x1d\x97\xde\xe9\xbb\x7f\x09\xcf\x2f\x8b\xa6\x10\x31\xbf\x7d\xf9\xc4\x82\x2e\x19\xed\x84\x98\xf7\x2e\x5b\x2d\xe4\x74\x6a\x27\x62\xb1\xf4\x8e\x9d\x97\xd4\xb5\x26\x77\x5e\x59\x37\xf6\xed\x6d\xb3\x6f\x2f\xde\xb3\x56\xb0\xdd\xaf\xf1\xbd\xea\xf7\x87\x93\x89\xfb\x25\x7d\xbd\x83\xee\x6e\xd9\x93\x37\x2b\xe8\xf5\xcd\xc2\xf7\x04\x3f\xe1\x36\xbc\xd3\x12\x1b\x91\x13\xd5\xc8\xee\xe5\x91\x3d\x4f\xc3\x9c\xb6\x9e\x7d\x08\x9d\xa4\x61\x29\xb2\x8e\x1d\x87\x6d\xbf\xba\x54\xaf\xd9\xfa\x56\xf4\x7f\x5b\x3f\xbc\x57\xd7\xda\xbf\xa5\x94\x16\xfb\xea\x23\xd8\xbe\x7c\x04\x0c\x53\x5e\x62\xe0\xdc\xba\x7f\xdc\xe6\x9f\xd7\x3b\xda\xca\xff\x05\x00\x00\xff\xff\x67\xf0\x5e\x07\x22\x08\x00\x00")

func module_js_bytes() ([]byte, error) {
	return bindata_read(
		_module_js,
		"module.js",
	)
}

func module_js() (*asset, error) {
	bytes, err := module_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "module.js", size: 2082, mode: os.FileMode(420), modTime: time.Unix(1414646096, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _observable_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\x4f\x8b\xe3\x36\x14\xbf\xfb\x53\x68\x2f\x3b\x1e\x08\x1e\x98\x63\x42\x28\x03\x2d\x94\x1e\xba\x0b\x0b\xbd\x2c\x7b\x50\x14\x39\x56\x63\x4b\xae\x24\x67\x1a\x16\x7f\xf7\xbe\x27\x5b\x96\x2c\xdb\x29\xbb\x3a\xcc\x38\xef\xaf\xde\xd3\xef\xfd\xa4\x97\x97\xec\xe5\x85\x7c\x3a\x19\xae\x6f\xf4\x54\x73\xf2\xc7\x17\x10\x64\x28\xfc\xdc\x9d\x6a\x61\x2a\xae\x0d\xa1\xf2\x4c\xbe\x74\x27\xc3\xb4\x38\xe1\x6f\x53\x51\xcd\x89\xad\x78\xe4\x89\x2e\x42\x5a\xae\x4b\xca\xf8\x8e\xbc\x57\x82\x55\x20\x60\x75\x77\xe6\x10\x81\x5c\xb8\xcd\x9f\x5d\x24\xe3\x23\xe5\xcf\xe8\x54\x76\x92\x59\xa1\x64\x91\xf9\xaf\x28\x2a\xb8\x7c\xcf\xfa\x2c\x0b\x92\xa2\xd5\xca\x2a\x7b\x6f\x79\x31\x05\x22\xc7\x29\x4a\x5e\xa2\x07\x81\x25\x4a\x92\x7f\xb0\x95\x30\xc1\x4e\x1b\xaf\xc4\x95\xea\x20\xca\xd7\xf2\xdb\xc1\xe9\x7b\xc2\x6b\xc3\x1f\x18\x17\x6d\x67\x2a\x48\x36\x9a\xbb\xbf\x9a\xdb\x4e\x4b\x67\x7a\xc8\xfa\x43\x96\xb4\xf6\x46\xeb\x8e\x9b\x6c\xea\x6b\xa8\x04\x32\x4b\xfe\x3e\x2b\xfb\xb0\x66\x57\x30\x25\x8d\xd5\x1d\xb3\x4a\x83\xcf\x64\x01\xa9\xa6\xde\x4d\xc2\xfc\xe6\x8b\x75\x7b\x77\xd9\xc1\xe9\x76\xc0\x7e\xae\x05\x37\xdc\xc6\x8d\xdc\x74\xf7\xcd\x7d\xd4\xdb\x1b\xd5\xa4\x41\xfb\xa1\x19\x9b\x5d\x2c\x95\xfe\x8d\x32\x68\xe4\xe2\xf8\xfc\x2a\xf3\x86\x3f\x87\x08\xfd\xe3\x8e\xaf\xd5\x75\x99\xd7\xe5\x13\x44\xbe\x43\x75\x43\x84\xe4\xd0\x98\x6a\xda\xce\x52\xf4\x34\x05\x09\xd8\xd5\x10\xc7\xd2\xab\x83\x36\x64\xb4\x44\x95\x44\x4d\x6e\x06\xa3\x20\xd6\x29\x61\xb4\xae\x4f\x94\x5d\xa7\x0d\x38\xf9\x90\x1c\x27\x2b\xf2\x82\xf8\x6f\xf2\x4e\xac\x68\xdc\x34\xd1\x01\x31\x44\x18\x30\xff\x07\xa0\x63\xf9\x99\xbc\xfd\xf9\x2b\x3a\x09\x09\xbb\x22\x15\x35\x84\x55\x54\x5e\xf8\x79\xe7\xc6\xf1\x22\x6e\x5c\x4e\x29\xdd\x48\x1a\xc2\xff\xe5\xac\xb3\x68\x82\x99\x85\x35\xbe\xf4\x28\x3c\xfe\xe6\xe7\x22\x0b\x53\xfe\x3f\xe8\x5c\x33\x4c\xe0\x19\x4c\x0e\x01\x9e\x41\x98\x53\x7d\x31\x3b\x52\xa6\x30\x13\x67\x3c\x2d\x0a\xe3\x77\x08\xf2\x12\x65\xd1\x6f\xf4\x05\x11\xfe\x83\x33\x5b\x22\x8e\x10\xa8\xfd\xed\xa6\x20\xd8\x13\x0a\x9e\x08\x6d\x4e\xe2\xd2\x09\x7b\x2f\x9c\x39\x7a\x2e\xd1\xa7\x62\xf4\x21\xc6\x15\x74\xda\x58\x2a\x19\x87\xf3\x0d\x1d\x48\x41\xaa\x02\xa8\xa7\x60\xe0\x7c\x32\xa9\xa1\x8f\xdb\xf0\xa1\xd4\x35\x3d\x2e\xaf\x9f\xb7\x62\x23\xd2\xc6\x0c\xae\xc4\xfc\xb1\xd1\x4b\x57\x32\x8a\xe9\xea\x37\x74\xfd\x42\x3a\x97\xc4\x7e\x83\x06\x25\x40\x52\xab\x18\x5b\x9f\xe6\x89\x8f\xe6\x5d\x5d\x99\x71\x92\x92\x3b\x02\x07\x74\x66\x84\x8e\x83\x56\xd1\xd0\x36\x46\x45\xd4\x97\x31\xe4\x06\x30\xc8\x2f\x80\x85\xe1\xaa\xdb\x13\x35\xd6\x85\xe5\x84\x5c\xaa\x3e\xff\x35\x92\x69\xb2\xaf\x84\x6a\x07\xe0\x17\xb4\x6d\xeb\x7b\x2e\xbb\xba\xde\xb9\x7d\x3e\x27\xb6\x0e\x24\x30\x75\xdc\x27\x89\x7b\x01\x81\x3e\x1c\x8f\x21\xe7\xc7\x8f\x0b\x0e\x9e\x9d\xfa\x06\x6f\xff\x0c\x71\x2f\xe0\x32\x9d\x73\x9f\x3d\x3c\x1d\x47\xc3\xd3\x14\x99\x4d\xc2\x18\xdd\x91\x9b\x56\x58\xc5\x21\x08\x48\xe0\x77\x20\xbd\x7b\x20\x5f\xab\x80\xae\x4b\x0b\xe4\xaa\xe9\x7b\x10\xc3\xcb\x45\x39\x06\x0d\x6c\x0c\xf1\x69\xdd\x84\x8d\xa0\x5b\x9e\x26\x5f\xdc\x2a\x63\x0f\x47\x7e\x7a\xd3\x9a\xde\xe3\x2b\xb6\x16\x0c\x68\x12\xf8\x19\xf7\xd9\x35\x5c\x5a\x13\x5a\x34\xc6\x5c\xa9\x78\xbc\xf3\x5c\x4d\xeb\x45\x31\xda\x82\xf3\xf0\x28\x63\x9d\xd6\x10\x99\x00\x3e\x2d\xc7\x8b\xc9\xdd\x32\x7f\x73\x66\xe1\x3a\x93\x96\x0a\x29\xe4\x65\x76\x5b\x85\x6e\x4b\xda\x9a\x4a\xd9\xc0\x84\x0e\x4d\xb0\x77\xbc\xdf\xc8\x11\xb0\xf4\x34\x84\x7a\x5a\x50\xa5\x1b\x4d\x00\x58\x44\x86\x29\x26\x7c\x85\x3e\xcb\x34\x2c\x31\x05\xa4\x4f\xaf\x90\x60\x76\xbf\x1c\xc7\xf6\xae\xb1\x96\x1f\x52\x37\xc7\x3e\x5b\x42\x4f\xab\x79\xfc\xf9\xa9\x57\x38\xbd\xef\xfd\x92\xd0\x50\x79\x5d\x8a\x61\x1c\x48\x7e\x05\x18\x11\xb5\xc5\xa2\x43\x09\x70\x65\x7f\x7a\x97\x9f\xb5\x6a\xb9\xb6\xf7\xfc\xfa\xfc\x88\x74\xd5\xeb\xd7\xeb\x37\xd8\x48\x38\x15\xf8\xfd\x93\x2c\x8b\xcb\xb7\xe5\x35\xe9\x44\x4a\xbf\x69\x67\xbc\x9f\x7f\x7a\xf5\xd1\x7c\xb6\xcb\xf7\x66\x34\x98\xf1\x6b\xd4\xa1\xf7\xcc\x4b\x21\x79\x3e\x18\x06\xde\xdc\x47\xdf\x3b\xa7\x9b\x3c\xf7\xe1\x73\xd0\xb4\x41\xd3\xce\x35\x81\x06\xf6\xd1\xf7\xa0\x33\x91\xce\x24\x3a\x1c\xed\xbd\xfb\x3b\xda\x8e\xfd\xde\x4f\x5f\xbb\x81\xb2\x60\xf4\xce\xbc\xd5\x9c\x51\x7c\x8b\x01\xf7\x52\x03\xd3\xe3\x8e\xca\x6d\x9f\x2f\xb6\x64\xab\x4e\x5e\xe3\x8c\x99\xbb\x0d\xfe\x0b\x00\x00\xff\xff\x24\x45\x99\xb1\x78\x0d\x00\x00")

func observable_js_bytes() ([]byte, error) {
	return bindata_read(
		_observable_js,
		"observable.js",
	)
}

func observable_js() (*asset, error) {
	bytes, err := observable_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "observable.js", size: 3448, mode: os.FileMode(420), modTime: time.Unix(1424326531, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assert.js": assert_js,
	"dom.js": dom_js,
	"index.js": index_js,
	"layout.js": layout_js,
	"module.js": module_js,
	"observable.js": observable_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"assert.js": &_bintree_t{assert_js, map[string]*_bintree_t{
	}},
	"dom.js": &_bintree_t{dom_js, map[string]*_bintree_t{
	}},
	"index.js": &_bintree_t{index_js, map[string]*_bintree_t{
	}},
	"layout.js": &_bintree_t{layout_js, map[string]*_bintree_t{
	}},
	"module.js": &_bintree_t{module_js, map[string]*_bintree_t{
	}},
	"observable.js": &_bintree_t{observable_js, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

