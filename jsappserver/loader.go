package jsappserver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _render_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x53\x4f\x6f\x9b\x30\x14\xbf\xe7\x53\xf8\x66\x5b\x8b\xdc\x56\xbb\x35\xca\x61\x1a\x39\x44\x63\x65\x6b\xbb\xc3\x34\x4d\x93\xc1\x8f\x94\x89\xd8\xc8\x36\x49\x23\xca\x77\xaf\x8d\x81\x40\x52\x5f\x10\xbc\xf7\xfb\xf3\x7e\xcf\x90\xbc\x96\x99\x2d\x94\x24\x14\x35\x0b\xe4\xce\x81\x6b\x54\x71\xfb\x82\xd6\xe8\x58\x48\xa1\x8e\xac\x54\x19\xf7\x2d\xcc\x7f\x96\x7c\x0f\xab\xae\xb1\xc8\x11\x09\x8d\xeb\x35\xc2\x37\x78\x20\xf0\xa7\x27\xc0\x37\x8e\x01\x5e\x71\x00\xb4\x8b\x49\xc9\x3f\x98\xa9\x53\x63\x35\xb9\x5d\x86\xd7\x92\x1b\xbb\xf5\x80\x24\x27\x98\x61\x4a\xd1\xdb\x5b\x57\x59\x9d\x91\x9f\x1c\x2b\xfb\x6f\x7a\xca\xdf\xc9\xf6\xe1\x1b\x33\x60\x23\x48\xeb\x5d\x0c\x07\x28\xc9\x1d\x9d\xd6\x34\x18\x55\xeb\x0c\x62\xc5\x05\x68\x82\xf1\x12\x35\xed\x72\x18\xed\xc7\xe3\x26\x4e\xbe\x44\x9b\xe8\xdf\xf7\x24\xfa\x15\x6f\x9e\x28\xdb\x81\x7d\xec\x31\x86\xfc\x19\x27\x6a\xbc\xfa\x7d\xe7\xc1\xbb\xd5\x7c\x6f\xee\x7b\x09\xf7\x66\xe0\x67\x0d\xfa\xf4\x64\x75\x21\x77\xe4\x32\x37\x03\x5c\x67\xc3\xb4\xbe\xe1\x8e\xd2\x10\xc6\xdf\x25\x1a\x17\x70\x2c\x84\xd3\x9e\xa6\xe8\x13\x0e\x5f\xbd\xab\xe7\xc2\x96\x30\x2d\xfb\x23\x54\x56\xef\x41\x5a\x66\x7d\xb5\xdb\xd9\xac\x9f\xf4\x61\x9c\xf3\x1f\x76\x2c\xc5\xd8\xbd\x9a\x29\xda\x53\x05\x2a\xef\x4b\x61\xb9\xc1\x36\xbe\x14\xef\x28\x46\x07\x99\x06\x6e\xe1\x19\x5e\xed\x83\x12\x30\x8c\x33\x91\x47\x50\x1a\xb8\x96\x70\x2b\x72\x3b\xd7\x41\x69\x48\xc3\x69\x7d\x24\x36\x43\x4c\x67\xbb\x30\x2f\x05\x0b\xe6\x67\x8c\x73\xc2\x21\x08\x95\x1a\xc7\x2c\xc5\xea\xaa\xea\xee\xd5\x56\x5a\xd0\x07\x5e\x4e\xfe\x93\xc6\x01\x3c\xbb\x93\x77\x17\xe9\xf3\x2d\xbd\x06\x76\x5e\xcf\x6d\xb3\x7a\xfb\xc1\x3e\xc6\x0c\x53\x25\x4e\x8c\x57\x95\x9b\xef\xeb\x4b\x51\x0a\x22\x45\x0f\x6f\xdd\xb3\xa5\x9e\x6c\xf1\x1e\x00\x00\xff\xff\xf0\x2e\xd3\x10\xb4\x03\x00\x00")

func render_js_bytes() ([]byte, error) {
	return bindata_read(
		_render_js,
		"render.js",
	)
}

func render_js() (*asset, error) {
	bytes, err := render_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "render.js", size: 948, mode: os.FileMode(420), modTime: time.Unix(1429209941, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _yoink_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x5a\x5f\x73\xdb\xb8\x11\x7f\xd7\xa7\xc0\x79\xa6\x21\x15\xeb\xa8\xe4\xda\x87\x8e\x74\xba\xcc\x8d\x93\xdc\xa5\xf5\xc5\x57\x27\x99\x69\x47\xf1\x75\x68\x12\x92\x78\xa6\x00\x86\x00\x2d\xab\x39\x7d\xf7\xee\x02\x20\x05\x80\xa0\x13\xa7\x99\xea\xc1\x12\x09\x60\xb9\xff\xf7\xb7\x4b\x4f\xa7\xa3\xe9\x94\xec\x79\xc1\x6e\x26\x24\x25\xa2\xd8\x56\x25\x25\x35\x15\xbc\xa9\x33\x4a\x4a\x9e\xe6\xb4\x4e\x08\xf9\xe7\x2f\xe7\x3f\x4b\x59\x5d\xd2\x0f\x0d\x15\x92\x14\x82\xc8\x0d\x25\x9c\x95\x7b\x92\xd3\x8a\xb2\x9c\xb2\x6c\x9f\x00\xad\xd1\xe8\x36\xad\xc9\xbf\x2e\x5e\xbd\xfe\x3b\x59\x90\x78\xd5\xb0\x4c\x16\x9c\x91\x78\x4c\x3e\x8e\x08\x7c\xa2\x46\x50\x22\x64\x5d\x64\x32\x9a\x8f\xd4\x2d\x3c\x91\xd3\xeb\x66\x7d\x4e\x6f\x69\x09\xc7\x9e\x98\x85\xee\xb4\xa0\xf2\x79\xb7\x21\x66\x2d\x2d\xfc\x38\x07\xd9\x5c\xdd\x3f\x78\xc7\x7f\x17\x9c\xbd\x62\x92\xd6\x55\x4d\xe1\x6f\x2c\xe9\x9d\xb4\x69\xc0\xdd\xa6\x66\xe4\x6f\x6f\x2e\x5e\x27\x55\x5a\x0b\xaa\x77\x0c\x11\xf3\x49\x4d\x80\xc0\x87\xa6\xa8\xe9\x84\x64\x69\x59\x5e\xa7\x19\x28\x13\xe8\xa4\x5b\x61\x3f\x05\x14\xfd\x9a\x4b\x3a\x23\x67\x9b\x9a\x6f\xe9\xf4\xf6\xaf\xed\x39\xa3\xcd\x06\x08\xe2\x39\xca\xe0\x52\x50\x01\x7a\x7f\x09\xab\x2b\x7e\x37\x15\x55\x01\x86\xd8\x72\x76\x43\x41\xe3\x1c\x4e\xac\x0a\x46\xc9\xae\x90\x1b\x38\x96\x74\xcf\x40\x55\xae\xfe\x0d\xea\x05\x65\x44\x96\xf6\x8d\x85\x3b\x3e\x73\x8a\xe7\x81\xbb\x93\xa3\x39\x4e\xe6\x11\x39\x25\x28\x10\x7c\x45\x87\x71\x34\x77\xc9\x1e\x2f\x8b\x15\x89\xe5\xbe\xa2\x7c\x05\x1c\xb0\x9c\xef\xc8\x37\x0b\x78\x5e\xc3\x34\xd9\x3c\x22\x8f\x1e\x99\x95\x84\xde\xd1\xec\x4d\x56\x17\x95\xa3\x71\xa5\x8d\x37\x15\xcd\x8a\xb4\x24\x9b\x94\xe5\x65\xc1\xd6\x64\xc5\x6b\xa2\x94\xcb\xa8\x24\x2f\xee\xaa\x92\xd7\xb4\xb6\xcf\x3c\x5e\x97\xfc\x1a\x4e\xc8\x6d\x35\x23\xb2\x6e\xe8\xe3\xa9\xb5\xdc\x7b\x62\x1c\xc1\x46\xd4\x04\x08\xa4\xb4\x32\x9e\x5b\xdb\x57\xb0\x02\xeb\xc7\x5b\x07\x42\x4b\xd0\xc6\x47\x6f\x0f\xbd\x4d\xcb\xd8\x3f\x7e\xe8\x7e\xad\x62\xfb\x00\x21\xd7\xa9\xa0\xef\xea\x72\xd6\x2a\x3b\xc1\x1b\x13\x67\xcb\xaa\x28\xdd\x2d\x4d\x5d\xba\x3b\xb4\x22\x67\x47\x7f\x72\x56\xcd\xb1\xee\xbc\xbb\xaa\x3d\x6f\x66\xbe\x8f\x1c\x07\xdc\xd4\x75\x71\x1d\x87\xab\xb4\x29\xa5\xe5\xe2\x02\x54\x70\x94\x10\x43\x69\xe6\x07\xd4\xc4\x5a\x9e\xb9\x01\xa2\xe9\xfb\xf1\x7c\x56\x72\x46\x31\x25\x1c\xdc\xfb\x99\xba\xcf\x6d\x4f\x51\x5b\x93\xaa\xe6\x92\xa3\xcb\x01\x33\x7c\xee\x07\x2e\xa3\xbb\x96\x64\x38\x66\xab\x54\x08\x09\x51\xd7\xac\x37\xf1\x5d\x20\xf2\xef\xc2\xc7\x8a\x56\x8e\xb8\x16\xd9\x84\xa0\x95\x8c\x56\x27\xc7\x35\x10\xdf\xbe\x10\xa8\xdd\x6c\x03\x4a\xde\xf2\xbc\x29\xe9\x99\xbe\xe8\x34\xee\x26\x84\x73\xce\x6f\x48\x53\x91\x94\xd9\x34\x54\x20\x60\x4a\x78\x77\x79\x1e\x09\xe5\x2e\x04\xc2\x92\x32\x01\x5c\x39\x51\xf8\x8d\x75\xca\x8d\x2f\x6d\x4e\x0c\xe6\x05\x32\x9e\x88\xe6\x1a\xc3\x9c\xad\x63\xbc\x2a\x53\x01\x36\xce\xe9\xdd\xc5\x2a\x8e\x92\x68\x0c\x01\xf2\x54\x09\x98\x94\x94\xad\xe5\x66\x9c\x48\x7e\xce\x77\xb4\x3e\x03\xe7\x8d\x9d\xb0\x21\x0e\xa7\x0b\x47\xf6\x25\x3c\xef\x8a\xfc\xf1\x87\xad\x70\x3b\x66\x6c\xd1\x3b\x27\x51\x92\xb6\x25\xc7\x91\xce\x22\x6d\xf8\x22\x0b\x48\x34\x4f\x7d\x49\x5b\xe5\xda\x07\xd0\x64\xe3\xf1\xbd\xc1\xad\xd8\xf8\xb5\xe6\xb7\x90\x5b\x75\xa9\xcb\x8d\xd1\x54\x62\x85\x7a\x78\x0b\x32\xa1\x23\x40\xa2\xd3\xa5\x10\x78\x4d\x25\xa9\x9a\xb2\x14\x66\xab\x20\x3e\xc5\x9a\x96\xa9\x2c\x6e\x29\x91\x5c\x89\x96\x43\xc8\x65\x92\xd7\x7b\x24\x83\x37\x40\xcd\x64\x47\x09\x24\x7a\x92\x35\x35\xa6\x7b\x28\xa3\x48\x1f\xac\x93\xf4\x4c\x88\xe9\xa3\x67\xc3\x27\xc6\x58\xb6\x19\xa7\xd1\xd8\x33\x14\x1e\x37\x31\x0f\x14\xb6\x37\x3f\x51\x79\x69\xf4\x2c\x62\x95\x96\x82\xbe\x6a\x5b\xd4\xa3\x68\xe7\x34\x20\x89\x5f\xe1\x0d\x28\xa3\x62\x7a\xd0\x75\x74\x4c\x0d\x57\x4e\x3f\xd7\x1a\xef\x01\x05\x3f\xe7\x3b\x86\xea\x02\x03\xa9\x6a\xa5\xe2\x23\x15\x7b\x96\x81\xc7\x31\xde\x88\x72\xef\xc6\xf1\x9a\xca\x97\xb0\x27\xae\x52\xb9\x09\x87\xa2\xd1\x14\x42\x08\xc8\x25\x2e\xda\xb1\xdd\xbf\x23\xc9\xd9\x25\x4d\xf3\xfd\x1b\x99\x4a\x7a\x06\x05\x6c\x4d\xf3\xd8\x77\x4b\x74\x61\x20\x9a\xd4\xdd\x4e\xe5\xbe\x7f\xf1\xf7\x39\x2e\xac\x0f\x88\x8a\x33\x41\xdf\xb6\xe0\x22\x11\x70\xba\x11\x18\x59\xdf\x3d\x79\xe2\xd9\xe4\x10\x28\x4a\x78\x86\x33\xf5\x60\x3c\x4a\x33\xc5\x22\x26\xcf\x3e\xdf\x73\xf7\x14\xa0\xb9\x38\xfa\xe9\xc5\xdb\x08\x2d\x81\xfa\xc2\x3a\x3b\x76\x37\x09\x40\x7c\x5e\xae\xc5\x7a\x0e\xcf\xa2\xdb\x6f\x77\x18\x4e\xca\xaf\xd0\xe1\x77\x18\x30\x10\x09\x39\x87\x67\x03\xa4\x4c\x8f\xe8\x72\x93\x0a\x72\x4d\x29\x83\x35\x6d\x50\x9a\x27\x5d\x21\xaa\xca\x94\xa9\xd2\xd3\x2b\x1e\x9d\x0f\x29\x9b\x7e\x3a\xf5\x36\x13\x04\x38\x13\xb2\x01\x93\x9e\xf1\x7c\x20\x19\xa3\xb1\xda\x1d\xe4\x87\x05\xea\x19\x51\x4c\x77\xeb\x7b\xf2\x67\xd0\x7c\xc0\xc2\x16\x00\xfd\x81\xf4\x76\x28\xdb\x82\x2d\x79\x49\x93\x92\xaf\xe3\x13\x85\xc4\x66\x47\x21\x10\xf7\x44\x27\x90\x7f\x9b\x04\xd5\x0d\x3f\x4e\xa2\x93\x41\x0b\xab\x87\x76\x55\x49\x89\xa5\xcf\xe9\x6f\x5d\x9a\x9a\xe4\x4b\x8b\x53\x2f\x5d\xa2\x80\x0d\x78\xd2\x8b\xba\xe6\xc1\x02\x03\x41\x8c\x71\xde\x6e\xe9\x54\xe8\x49\x70\x74\x6f\xc8\xca\x9f\x48\xca\x58\x37\x76\x68\xb2\x81\x0c\xd0\x39\x02\x02\xb3\x06\xfc\xf8\x17\x25\x4b\xbc\xf2\x2a\xf4\xa7\x52\xdb\x60\x51\xfe\x8a\x25\xe1\xeb\x95\x83\xff\xa1\x14\x7c\xdd\x32\x30\x88\x77\xef\xc1\xb9\xff\x17\x7c\x3b\x80\xfd\x04\xad\xa1\xc9\x28\xfe\x43\x7f\x55\xfb\x5d\x74\x89\xaa\xb9\xc3\x34\xb3\xbc\xb2\x24\x04\x3f\xc6\x85\x1b\x50\x01\xe1\xa1\x98\xe7\x09\xe4\xae\x8b\x1d\x03\x4f\xa9\x68\x2d\xf7\xf1\xcd\x38\x14\xf8\x77\x22\xa9\x1a\xb1\x89\x6f\xb0\xa1\x5a\x60\x17\x02\x6d\x32\x04\xc7\xbb\xcb\x57\x67\x7c\x0b\x29\x1e\x6c\x1d\xf3\xe5\xcd\x95\x5f\xb8\xc3\x29\x5d\x43\x55\x91\xfc\x0e\x29\x24\x8e\x1e\x45\x03\x02\xaf\x8f\xe6\xfd\x9c\xec\x88\x21\x63\xa3\xf9\xdc\xd7\x4f\x91\x1b\x9f\xc3\x3c\x33\x77\x30\xdc\x8f\x79\x8e\x18\x55\x9b\x42\x37\x0b\xe0\xe5\x5d\x82\x7f\xf5\xdc\x49\xaf\x9a\x86\xdf\x16\xb7\x8f\xa9\xd0\x0c\xbe\xb1\xac\x23\xf3\x9e\x15\xaa\x1e\x1d\xbd\x94\x93\x53\xe8\xf9\x9e\xa1\xbe\x2b\x31\xac\x58\x47\x10\x55\xf7\x5b\x6f\xd4\x21\x8d\x7d\x24\xb4\xe4\xba\x39\xc7\x72\x44\x32\x28\xa8\xa0\x20\x02\x01\x0d\x71\x0f\xce\x21\x37\x85\xe8\x14\x9f\xf4\x51\x82\x93\xf6\x7a\xa0\x15\xf4\xbf\x2c\xf2\x2b\x10\x1b\x96\xe7\xc8\x86\xb2\x49\x8b\x87\xa1\x0d\xf3\xa1\xe5\x0b\xcd\x52\xc7\x51\x5f\x89\xc8\xe6\x42\x17\x4f\xa4\x3d\xf7\xa2\xae\x04\x23\x0d\xad\xe2\x6d\x3f\x3f\x8f\x42\xc8\x47\xd5\x5d\xa7\xa4\xf6\x62\xe4\xa1\x25\x1a\x9d\x70\xa8\x48\x07\xd9\x39\xd6\x9e\x4e\x8f\xf3\x00\xb3\xa9\xfa\x0a\xa9\x3f\x20\x2d\x7e\x9c\x48\x18\xd6\x86\x82\x76\xf8\x78\xc0\x73\xdd\xd8\xc3\x7f\x04\x36\x39\x02\x5a\xbb\x3d\x04\xba\x2e\x74\x69\xa9\x20\x59\x07\x78\xb0\xf8\x6b\x1f\x02\x3d\x3d\x7b\xa0\x35\x55\x08\xa8\x1d\xf7\x31\x61\x18\x39\x53\xae\x0b\xf5\x4b\x9d\xc0\xfe\x52\x01\xb3\x1d\xd6\xb5\xb2\x44\x74\xa6\xea\x9b\x62\x46\x9b\xa6\x47\xa5\x63\x43\xc1\x48\x4b\x4d\x96\xe2\x6d\xde\x2c\x0b\xe3\xa9\x60\xac\x76\x5a\x52\x0f\xc6\x74\xdb\xd4\x6d\xc1\x55\x86\x7d\x16\x3c\xf3\x79\xb8\xab\xfd\x84\xf0\x97\x0e\x6e\xd4\x3f\xc8\xe0\x16\x7a\x85\xc6\x30\x89\x04\x90\x58\xfb\x39\x04\xef\x7a\x80\xc4\x53\xc0\xa4\x4b\xa2\xed\xaf\x07\xe3\x94\x3e\x33\x41\x04\xd5\x7e\xda\xbe\xa7\xc8\x27\x26\x6c\x43\x14\x46\x9f\x45\xcf\x64\x7b\xb0\x8f\xa0\xe5\x2d\x15\x2d\x9c\x41\xaf\x48\x08\x79\xdb\xe6\x48\x30\x23\x5d\xad\x00\xe1\x00\xe4\x01\x1c\x93\x92\x97\xaf\x5e\x5e\x10\x68\xa4\x1a\xd5\x0e\xe8\x80\x14\xc9\xbd\xde\xa5\x37\x0d\x66\xee\x10\x8b\x81\xb8\xd5\x3d\xc9\x4d\x51\xd9\xe1\xf6\x09\x48\x89\xa5\x0b\xa4\x33\xa8\x08\xac\xe4\x17\xc3\xca\xaa\x85\xd8\x8e\x39\x1d\x6e\x57\xc6\x8e\xe6\xc5\x3d\xd8\xc2\xd8\x5b\x56\x66\x87\x3d\x47\x81\x6d\x0c\x20\xa4\x3b\x63\x55\x78\x4f\x8d\x56\xd5\x44\xb5\x4a\xa0\x8d\xab\x7f\x94\x31\x78\xbb\xba\x3b\x35\xb7\x8b\x16\xf7\xcd\xa6\x80\xfc\x54\x3e\xf8\xb6\x37\x24\xa9\x4c\xbf\x8e\x58\x64\xaa\x6a\xe3\xd0\x64\xe6\x35\xaf\xb7\xaa\x08\x6b\x03\x83\xa4\x23\x9b\x48\x05\xfd\x29\x58\x0b\xd0\xc5\x74\xf9\x5b\xf2\x7e\x7a\x75\xba\x84\x3f\xef\x93\xf7\x09\x7e\x4f\xd7\x13\x60\xd7\x68\xff\x92\x6e\xf9\x2d\x16\xb3\x1c\xf2\x53\xca\x24\x89\xfe\x24\xa6\x49\x12\x91\x02\x1a\x45\xcb\x09\x0c\xb6\xf9\x88\xcf\x02\x60\x37\x39\x62\x3c\x77\xd2\x36\x23\x2b\xf4\x64\xd5\x6a\x28\x54\xd9\xf6\x1d\x87\xa1\xb9\x1f\x78\xeb\x3f\x1a\x5a\x43\xc3\xab\xc0\xf2\x07\xfc\xdd\xb3\x29\x8e\x2a\xa6\xef\x4f\xa7\xeb\x40\xa3\x9f\x53\x44\x6c\x71\x0f\x6a\x18\x96\xf5\xb2\x03\xe8\x44\xa7\x9f\x0a\xaa\xda\x09\x39\x19\x07\xe7\xc6\xf8\xe4\x6d\x2a\xb3\x8d\xeb\x1c\x82\xa6\x75\xb6\x41\x86\xe2\xe5\x6f\x8f\x16\x57\xa7\xe3\xc5\x33\xfc\x75\xf5\x78\x6c\xf3\x87\x5b\x41\x7e\x0d\x93\x4c\x9b\xdc\xae\xed\x36\x38\x10\x89\x15\x71\x85\xa9\x90\xa2\x1a\x8b\x1b\xf9\xc7\x8e\x24\x1d\x99\xa5\x91\x55\x1d\x5c\x3e\xbd\x1a\x63\x2c\x3a\xf7\xbe\xbb\x1a\xf7\x86\xaf\xdd\xf1\xb0\x09\xbe\xac\xdd\x00\x65\xf7\x4d\xb1\xb6\x09\xc1\x63\x07\x3a\xb8\x56\x3d\x25\x65\x3a\xd0\x84\x19\x1e\x2a\x88\xf5\x33\xf4\x96\x5b\xa8\xc9\x58\x71\xd8\x5a\x60\x05\x64\x14\x92\x3f\xa4\xb3\x8e\x83\x1e\xa9\x22\x30\x57\x13\x99\xe9\x1b\xba\xdb\x40\xfd\xa5\x19\xdc\x6a\xf8\x26\x30\xe3\x39\x9d\x3e\xd6\x79\xd1\xa3\x95\x31\xa9\xde\x7a\x59\xb7\x0d\xad\x8c\x37\x4c\x1d\x34\xd5\x3a\x82\x68\x3a\x4e\x4b\xdc\xba\x6b\xa9\xfc\xc2\xc9\x86\x45\xa8\x38\x1a\xeb\x1d\x5f\x11\x05\x30\x52\xb7\x17\x64\x5d\x16\x2d\x50\x0d\x6e\x41\x11\x00\x75\x3f\x9d\x9b\xd9\x2e\x24\xa4\xb6\xbf\x65\x38\xa3\xc3\x80\x77\x75\x3c\x58\xd8\x95\x36\x20\x85\x81\xd1\xee\xad\xea\xc6\xf4\x49\x5a\x55\xe5\x3e\xc6\xec\x39\x51\x9c\x7e\x76\xc9\x3e\xf8\x15\xa6\x07\xaf\x94\x0b\x01\x2b\xe1\xb1\x4e\x0b\xee\xfd\xe6\x6d\xa8\x84\x22\xea\x8a\x0b\x6d\xe9\x82\x7c\x8f\x02\xe2\x8f\xd3\xc0\x44\xbb\xfd\xa8\x30\x47\xbd\xfb\x75\x09\xed\x31\x20\xe8\x03\xfb\xbf\x49\xc0\x5f\x3e\x0d\x13\x42\xa5\xc3\xb8\x94\x1d\xa6\xfe\x88\xb0\x5d\x20\xe7\x7a\x76\x82\xd0\x4c\xd6\x0d\xce\x43\xfa\x85\x18\x37\xea\x7d\x0f\x48\x1b\x2d\x33\xd6\x84\x1a\x8b\x6b\x64\xbd\xcd\xd4\xb3\x49\xd3\x39\xf8\x05\xda\x22\x8e\xc3\x12\xeb\xca\xdb\x58\xb8\xaf\xc8\x9c\x4b\xd8\xaa\x5f\x65\x05\x5e\xa7\x8d\xe7\x3d\x8d\x7d\xb4\x55\x36\xfb\xc2\x94\x39\x50\x02\xcd\x08\xe5\x9e\x7c\x69\x98\xf0\x34\x3e\x4e\xee\x4b\xb7\xce\xb3\x5a\x29\x8e\x28\xc1\x2b\xbb\xb3\xde\x9d\xe3\x44\xc7\x79\xb5\x3f\x73\x2f\x27\x16\x8f\x43\x13\x21\x97\xed\x99\x77\x3d\x09\x9a\x6b\x16\x7a\xcd\xa9\x25\x9a\x8f\x0e\x31\xba\xff\x48\x39\xab\x92\x4b\xff\x33\x43\xaa\xe7\x00\x38\x66\xeb\x70\x7e\x0e\x6d\x04\x9c\x16\x6a\x20\x88\xd1\x6d\x7a\xbd\x46\x60\xca\x56\xef\x8d\xc7\xd8\xd4\xe8\xf7\xeb\x68\x3b\x3a\x52\xd4\x80\xfe\x7f\x03\x00\x00\xff\xff\x02\x2b\xcf\xd3\x7a\x21\x00\x00")

func yoink_js_bytes() ([]byte, error) {
	return bindata_read(
		_yoink_js,
		"yoink.js",
	)
}

func yoink_js() (*asset, error) {
	bytes, err := yoink_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "yoink.js", size: 8570, mode: os.FileMode(420), modTime: time.Unix(1429210419, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"render.js": render_js,
	"yoink.js": yoink_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"render.js": &_bintree_t{render_js, map[string]*_bintree_t{
	}},
	"yoink.js": &_bintree_t{yoink_js, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

